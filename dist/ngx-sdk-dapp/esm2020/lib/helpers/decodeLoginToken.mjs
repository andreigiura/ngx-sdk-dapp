import { decodeBase64 } from './base64Utils';
import { isString } from 'lodash';
export const decodeLoginToken = (loginToken) => {
    if (!loginToken || !isString(loginToken)) {
        return null;
    }
    const parts = loginToken.split('.');
    if (parts.length !== 4) {
        console.error('Invalid loginToken. You may be trying to decode a nativeAuthToken. Try using decodeNativeAuthToken method instead');
        return null;
    }
    try {
        const [origin, blockHash, ttl, extraInfo] = parts;
        const parsedExtraInfo = JSON.parse(decodeBase64(extraInfo));
        const parsedOrigin = decodeBase64(origin);
        return {
            ttl: Number(ttl),
            extraInfo: parsedExtraInfo,
            origin: parsedOrigin,
            blockHash,
        };
    }
    catch (e) {
        console.error(`Error trying to decode ${loginToken}:`, e);
        return null;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlTG9naW5Ub2tlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zZGstZGFwcC9zcmMvbGliL2hlbHBlcnMvZGVjb2RlTG9naW5Ub2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFTbEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FDOUIsVUFBa0IsRUFDWSxFQUFFO0lBQ2hDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDeEMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFcEMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QixPQUFPLENBQUMsS0FBSyxDQUNYLG1IQUFtSCxDQUNwSCxDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELElBQUk7UUFDRixNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2xELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTFDLE9BQU87WUFDTCxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNoQixTQUFTLEVBQUUsZUFBZTtZQUMxQixNQUFNLEVBQUUsWUFBWTtZQUNwQixTQUFTO1NBQ1YsQ0FBQztLQUNIO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLDBCQUEwQixVQUFVLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUxRCxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVjb2RlQmFzZTY0IH0gZnJvbSAnLi9iYXNlNjRVdGlscyc7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVjb2RlZExvZ2luVG9rZW5UeXBlIHtcbiAgYmxvY2tIYXNoOiBzdHJpbmc7XG4gIGV4dHJhSW5mbz86IHsgdGltZXN0YW1wOiBudW1iZXIgfTtcbiAgb3JpZ2luOiBzdHJpbmc7XG4gIHR0bDogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgZGVjb2RlTG9naW5Ub2tlbiA9IChcbiAgbG9naW5Ub2tlbjogc3RyaW5nXG4pOiBEZWNvZGVkTG9naW5Ub2tlblR5cGUgfCBudWxsID0+IHtcbiAgaWYgKCFsb2dpblRva2VuIHx8ICFpc1N0cmluZyhsb2dpblRva2VuKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcGFydHMgPSBsb2dpblRva2VuLnNwbGl0KCcuJyk7XG5cbiAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gNCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAnSW52YWxpZCBsb2dpblRva2VuLiBZb3UgbWF5IGJlIHRyeWluZyB0byBkZWNvZGUgYSBuYXRpdmVBdXRoVG9rZW4uIFRyeSB1c2luZyBkZWNvZGVOYXRpdmVBdXRoVG9rZW4gbWV0aG9kIGluc3RlYWQnXG4gICAgKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBbb3JpZ2luLCBibG9ja0hhc2gsIHR0bCwgZXh0cmFJbmZvXSA9IHBhcnRzO1xuICAgIGNvbnN0IHBhcnNlZEV4dHJhSW5mbyA9IEpTT04ucGFyc2UoZGVjb2RlQmFzZTY0KGV4dHJhSW5mbykpO1xuICAgIGNvbnN0IHBhcnNlZE9yaWdpbiA9IGRlY29kZUJhc2U2NChvcmlnaW4pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR0bDogTnVtYmVyKHR0bCksXG4gICAgICBleHRyYUluZm86IHBhcnNlZEV4dHJhSW5mbyxcbiAgICAgIG9yaWdpbjogcGFyc2VkT3JpZ2luLFxuICAgICAgYmxvY2tIYXNoLFxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciB0cnlpbmcgdG8gZGVjb2RlICR7bG9naW5Ub2tlbn06YCwgZSk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbiJdfQ==