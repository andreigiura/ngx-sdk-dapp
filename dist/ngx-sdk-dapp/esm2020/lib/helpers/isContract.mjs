import { Address, TransactionPayload } from '@multiversx/sdk-core/out';
import { addressIsValid } from './addressIsValid';
import { isStringBase64 } from './base64Utils';
export var TypesOfSmartContractCallsEnum;
(function (TypesOfSmartContractCallsEnum) {
    TypesOfSmartContractCallsEnum["MultiESDTNFTTransfer"] = "MultiESDTNFTTransfer";
    TypesOfSmartContractCallsEnum["ESDTNFTTransfer"] = "ESDTNFTTransfer";
})(TypesOfSmartContractCallsEnum || (TypesOfSmartContractCallsEnum = {}));
export const ESDTTransferTypes = [
    'ESDTNFTTransfer',
    'ESDTNFTBurn',
    'ESDTNFTAddQuantity',
    'ESDTNFTCreate',
    'MultiESDTNFTTransfer',
    'ESDTTransfer',
    'ESDTBurn',
    'ESDTLocalMint',
    'ESDTLocalBurn',
    'ESDTWipe',
    'ESDTFreeze',
];
export function isContract(receiver, sender, data = '') {
    const isValid = addressIsValid(receiver);
    if (!isValid) {
        return false;
    }
    const isContract = new Address(receiver).isContractAddress();
    if (isContract) {
        return true;
    }
    const extractedAddress = getAddressFromDataField({ receiver, data });
    if (!extractedAddress) {
        return false;
    }
    const isExtractedAddressContractCall = new Address(extractedAddress).isContractAddress();
    return (isExtractedAddressContractCall || isSelfESDTContract(receiver, sender, data));
}
export function isSelfESDTContract(receiver, sender, data) {
    const parts = data?.split('@');
    if (parts == null) {
        return false;
    }
    const [type, ...restParts] = parts;
    const isSelfTransaction = sender != null && receiver != null && receiver === sender;
    const isCorrectESDTType = ESDTTransferTypes.includes(type);
    const areDataPartsValid = restParts.every((part) => isHexValidCharacters(part) && isHexValidLength(part));
    return isSelfTransaction && isCorrectESDTType && areDataPartsValid;
}
const isHexValidCharacters = (str) => {
    return str.toLowerCase().match(/[0-9a-f]/g);
};
const isHexValidLength = (str) => {
    return str.length % 2 === 0;
};
export function getAddressFromDataField({ receiver, data, }) {
    try {
        if (!data) {
            return receiver;
        }
        const parsedData = isStringBase64(data)
            ? TransactionPayload.fromEncoded(data).toString()
            : data;
        const addressIndex = getAddressIndex(parsedData);
        const parts = parsedData.split('@');
        return addressIndex > -1 ? parts[addressIndex] : receiver;
    }
    catch (err) {
        console.log(err);
        return;
    }
}
function getAddressIndex(data) {
    if (data.includes(TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)) {
        return 1;
    }
    if (data.includes(TypesOfSmartContractCallsEnum.ESDTNFTTransfer)) {
        return 4;
    }
    return -1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNDb250cmFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zZGstZGFwcC9zcmMvbGliL2hlbHBlcnMvaXNDb250cmFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0MsTUFBTSxDQUFOLElBQVksNkJBR1g7QUFIRCxXQUFZLDZCQUE2QjtJQUN2Qyw4RUFBNkMsQ0FBQTtJQUM3QyxvRUFBbUMsQ0FBQTtBQUNyQyxDQUFDLEVBSFcsNkJBQTZCLEtBQTdCLDZCQUE2QixRQUd4QztBQUVELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9CLGlCQUFpQjtJQUNqQixhQUFhO0lBQ2Isb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsY0FBYztJQUNkLFVBQVU7SUFDVixlQUFlO0lBQ2YsZUFBZTtJQUNmLFVBQVU7SUFDVixZQUFZO0NBQ2IsQ0FBQztBQUVGLE1BQU0sVUFBVSxVQUFVLENBQ3hCLFFBQWdCLEVBQ2hCLE1BQWUsRUFDZixJQUFJLEdBQUcsRUFBRTtJQUVULE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV6QyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFFN0QsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsTUFBTSxnQkFBZ0IsR0FBRyx1QkFBdUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJ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eyBBZGRyZXNzLCBUcmFuc2FjdGlvblBheWxvYWQgfSBmcm9tICdAbXVsdGl2ZXJzeC9zZGstY29yZS9vdXQnO1xuaW1wb3J0IHsgYWRkcmVzc0lzVmFsaWQgfSBmcm9tICcuL2FkZHJlc3NJc1ZhbGlkJztcbmltcG9ydCB7IGlzU3RyaW5nQmFzZTY0IH0gZnJvbSAnLi9iYXNlNjRVdGlscyc7XG5cbmV4cG9ydCBlbnVtIFR5cGVzT2ZTbWFydENvbnRyYWN0Q2FsbHNFbnVtIHtcbiAgTXVsdGlFU0RUTkZUVHJhbnNmZXIgPSAnTXVsdGlFU0RUTkZUVHJhbnNmZXInLFxuICBFU0RUTkZUVHJhbnNmZXIgPSAnRVNEVE5GVFRyYW5zZmVyJyxcbn1cblxuZXhwb3J0IGNvbnN0IEVTRFRUcmFuc2ZlclR5cGVzID0gW1xuICAnRVNEVE5GVFRyYW5zZmVyJyxcbiAgJ0VTRFRORlRCdXJuJyxcbiAgJ0VTRFRORlRBZGRRdWFudGl0eScsXG4gICdFU0RUTkZUQ3JlYXRlJyxcbiAgJ011bHRpRVNEVE5GVFRyYW5zZmVyJyxcbiAgJ0VTRFRUcmFuc2ZlcicsXG4gICdFU0RUQnVybicsXG4gICdFU0RUTG9jYWxNaW50JyxcbiAgJ0VTRFRMb2NhbEJ1cm4nLFxuICAnRVNEVFdpcGUnLFxuICAnRVNEVEZyZWV6ZScsXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb250cmFjdChcbiAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgc2VuZGVyPzogc3RyaW5nLFxuICBkYXRhID0gJydcbik6IGJvb2xlYW4ge1xuICBjb25zdCBpc1ZhbGlkID0gYWRkcmVzc0lzVmFsaWQocmVjZWl2ZXIpO1xuXG4gIGlmICghaXNWYWxpZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGlzQ29udHJhY3QgPSBuZXcgQWRkcmVzcyhyZWNlaXZlcikuaXNDb250cmFjdEFkZHJlc3MoKTtcblxuICBpZiAoaXNDb250cmFjdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgZXh0cmFjdGVkQWRkcmVzcyA9IGdldEFkZHJlc3NGcm9tRGF0YUZpZWxkKHsgcmVjZWl2ZXIsIGRhdGEgfSk7XG5cbiAgaWYgKCFleHRyYWN0ZWRBZGRyZXNzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgaXNFeHRyYWN0ZWRBZGRyZXNzQ29udHJhY3RDYWxsID0gbmV3IEFkZHJlc3MoXG4gICAgZXh0cmFjdGVkQWRkcmVzc1xuICApLmlzQ29udHJhY3RBZGRyZXNzKCk7XG5cbiAgcmV0dXJuIChcbiAgICBpc0V4dHJhY3RlZEFkZHJlc3NDb250cmFjdENhbGwgfHwgaXNTZWxmRVNEVENvbnRyYWN0KHJlY2VpdmVyLCBzZW5kZXIsIGRhdGEpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGZFU0RUQ29udHJhY3QoXG4gIHJlY2VpdmVyOiBzdHJpbmcsXG4gIHNlbmRlcj86IHN0cmluZyxcbiAgZGF0YT86IHN0cmluZ1xuKSB7XG4gIGNvbnN0IHBhcnRzID0gZGF0YT8uc3BsaXQoJ0AnKTtcbiAgaWYgKHBhcnRzID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgW3R5cGUsIC4uLnJlc3RQYXJ0c10gPSBwYXJ0cztcbiAgY29uc3QgaXNTZWxmVHJhbnNhY3Rpb24gPVxuICAgIHNlbmRlciAhPSBudWxsICYmIHJlY2VpdmVyICE9IG51bGwgJiYgcmVjZWl2ZXIgPT09IHNlbmRlcjtcbiAgY29uc3QgaXNDb3JyZWN0RVNEVFR5cGUgPSBFU0RUVHJhbnNmZXJUeXBlcy5pbmNsdWRlcyh0eXBlKTtcbiAgY29uc3QgYXJlRGF0YVBhcnRzVmFsaWQgPSByZXN0UGFydHMuZXZlcnkoXG4gICAgKHBhcnQpID0+IGlzSGV4VmFsaWRDaGFyYWN0ZXJzKHBhcnQpICYmIGlzSGV4VmFsaWRMZW5ndGgocGFydClcbiAgKTtcbiAgcmV0dXJuIGlzU2VsZlRyYW5zYWN0aW9uICYmIGlzQ29ycmVjdEVTRFRUeXBlICYmIGFyZURhdGFQYXJ0c1ZhbGlkO1xufVxuXG5jb25zdCBpc0hleFZhbGlkQ2hhcmFjdGVycyA9IChzdHI6IHN0cmluZykgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkubWF0Y2goL1swLTlhLWZdL2cpO1xufTtcbmNvbnN0IGlzSGV4VmFsaWRMZW5ndGggPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHN0ci5sZW5ndGggJSAyID09PSAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFkZHJlc3NGcm9tRGF0YUZpZWxkKHtcbiAgcmVjZWl2ZXIsXG4gIGRhdGEsXG59OiB7XG4gIHJlY2VpdmVyOiBzdHJpbmc7XG4gIGRhdGE6IHN0cmluZztcbn0pIHtcbiAgdHJ5IHtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHJldHVybiByZWNlaXZlcjtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkRGF0YSA9IGlzU3RyaW5nQmFzZTY0KGRhdGEpXG4gICAgICA/IFRyYW5zYWN0aW9uUGF5bG9hZC5mcm9tRW5jb2RlZChkYXRhKS50b1N0cmluZygpXG4gICAgICA6IGRhdGE7XG5cbiAgICBjb25zdCBhZGRyZXNzSW5kZXggPSBnZXRBZGRyZXNzSW5kZXgocGFyc2VkRGF0YSk7XG5cbiAgICBjb25zdCBwYXJ0cyA9IHBhcnNlZERhdGEuc3BsaXQoJ0AnKTtcbiAgICByZXR1cm4gYWRkcmVzc0luZGV4ID4gLTEgPyBwYXJ0c1thZGRyZXNzSW5kZXhdIDogcmVjZWl2ZXI7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFkZHJlc3NJbmRleChkYXRhOiBzdHJpbmcpIHtcbiAgaWYgKGRhdGEuaW5jbHVkZXMoVHlwZXNPZlNtYXJ0Q29udHJhY3RDYWxsc0VudW0uTXVsdGlFU0RUTkZUVHJhbnNmZXIpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgaWYgKGRhdGEuaW5jbHVkZXMoVHlwZXNPZlNtYXJ0Q29udHJhY3RDYWxsc0VudW0uRVNEVE5GVFRyYW5zZmVyKSkge1xuICAgIHJldHVybiA0O1xuICB9XG4gIHJldHVybiAtMTtcbn1cbiJdfQ==