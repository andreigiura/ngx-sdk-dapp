import { TokenPayment } from '@multiversx/sdk-core';
import BigNumber from 'bignumber.js';
import { DECIMALS, DIGITS, ZERO } from '../constants';
import { pipe } from './pipe';
import { stringIsInteger } from './stringIsInteger';
BigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });
export function formatAmount({ input, decimals = DECIMALS, digits = DIGITS, showLastNonZeroDecimal = false, showIsLessThanDecimalsLabel = false, addCommas = false, }) {
    if (!stringIsInteger(input, false)) {
        throw new Error('Invalid input');
    }
    const isNegative = new BigNumber(input).isNegative();
    let modInput = input;
    if (isNegative) {
        // remove - at start of input
        modInput = input.substring(1);
    }
    return (pipe(modInput)
        // format
        .then(() => TokenPayment.fungibleFromBigInteger('', modInput, decimals).toRationalNumber())
        // format
        .then((current) => {
        const bnBalance = new BigNumber(current);
        if (bnBalance.isZero()) {
            return ZERO;
        }
        const balance = bnBalance.toString(10);
        const [integerPart, decimalPart] = balance.split('.');
        const bNdecimalPart = new BigNumber(decimalPart || 0);
        const decimalPlaces = pipe(0)
            .if(Boolean(decimalPart && showLastNonZeroDecimal))
            .then(() => Math.max(decimalPart.length, digits))
            .if(bNdecimalPart.isZero() && !showLastNonZeroDecimal)
            .then(0)
            .if(Boolean(decimalPart && !showLastNonZeroDecimal))
            .then(() => Math.min(decimalPart.length, digits))
            .valueOf();
        const shownDecimalsAreZero = decimalPart &&
            digits >= 1 &&
            digits <= decimalPart.length &&
            bNdecimalPart.isGreaterThan(0) &&
            new BigNumber(decimalPart.substring(0, digits)).isZero();
        const formatted = bnBalance.toFormat(decimalPlaces);
        const formattedBalance = pipe(balance)
            .if(addCommas)
            .then(formatted)
            .if(Boolean(shownDecimalsAreZero))
            .then((current) => {
            const integerPartZero = new BigNumber(integerPart).isZero();
            const [numericPart, decimalSide] = current.split('.');
            const zeroPlaceholders = new Array(digits - 1).fill(0);
            const zeros = [...zeroPlaceholders, 0].join('');
            const minAmount = [...zeroPlaceholders, 1].join(''); // 00..1
            if (!integerPartZero) {
                return `${numericPart}.${zeros}`;
            }
            if (showIsLessThanDecimalsLabel) {
                return `<${numericPart}.${minAmount}`;
            }
            if (!showLastNonZeroDecimal) {
                return numericPart;
            }
            return `${numericPart}.${decimalSide}`;
        })
            .if(Boolean(!shownDecimalsAreZero && decimalPart))
            .then((current) => {
            const [numericPart] = current.split('.');
            let decimalSide = decimalPart.substring(0, decimalPlaces);
            if (showLastNonZeroDecimal) {
                const noOfZerosAtEnd = digits - decimalSide.length;
                if (noOfZerosAtEnd > 0) {
                    const zeroPadding = Array(noOfZerosAtEnd).fill(0).join('');
                    decimalSide = `${decimalSide}${zeroPadding}`;
                    return `${numericPart}.${decimalSide}`;
                }
                return current;
            }
            if (!decimalSide) {
                return numericPart;
            }
            return `${numericPart}.${decimalSide}`;
        })
            .valueOf();
        return formattedBalance;
    })
        .if(isNegative)
        .then((current) => `-${current}`)
        .valueOf());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0QW1vdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNkay1kYXBwL3NyYy9saWIvaGVscGVycy9mb3JtYXRBbW91bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM5QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFcEQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLGFBQWEsRUFBRSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQVczRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQzNCLEtBQUssRUFDTCxRQUFRLEdBQUcsUUFBUSxFQUNuQixNQUFNLEdBQUcsTUFBTSxFQUNmLHNCQUFzQixHQUFHLEtBQUssRUFDOUIsMkJBQTJCLEdBQUcsS0FBSyxFQUNuQyxTQUFTLEdBQUcsS0FBSyxHQUNBO0lBQ2pCLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDbEM7SUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNyRCxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFFckIsSUFBSSxVQUFVLEVBQUU7UUFDZCw2QkFBNkI7UUFDN0IsUUFBUSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFFRCxPQUFPLENBQ0wsSUFB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QixDQUFDO0lBQzFCLENBQUMsQ0FBQztTQUNELEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDZCxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUM7U0FFaEMsT0FBTyxFQUFFLENBQ2IsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb2tlblBheW1lbnQgfSBmcm9tICdAbXVsdGl2ZXJzeC9zZGstY29yZSc7XG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gJ2JpZ251bWJlci5qcyc7XG5pbXBvcnQgeyBERUNJTUFMUywgRElHSVRTLCBaRVJPIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuL3BpcGUnO1xuaW1wb3J0IHsgc3RyaW5nSXNJbnRlZ2VyIH0gZnJvbSAnLi9zdHJpbmdJc0ludGVnZXInO1xuXG5CaWdOdW1iZXIuY29uZmlnKHsgUk9VTkRJTkdfTU9ERTogQmlnTnVtYmVyLlJPVU5EX0ZMT09SIH0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1hdEFtb3VudFR5cGUge1xuICBpbnB1dDogc3RyaW5nO1xuICBkZWNpbWFscz86IG51bWJlcjtcbiAgZGlnaXRzPzogbnVtYmVyO1xuICBzaG93SXNMZXNzVGhhbkRlY2ltYWxzTGFiZWw/OiBib29sZWFuO1xuICBzaG93TGFzdE5vblplcm9EZWNpbWFsPzogYm9vbGVhbjtcbiAgYWRkQ29tbWFzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEFtb3VudCh7XG4gIGlucHV0LFxuICBkZWNpbWFscyA9IERFQ0lNQUxTLFxuICBkaWdpdHMgPSBESUdJVFMsXG4gIHNob3dMYXN0Tm9uWmVyb0RlY2ltYWwgPSBmYWxzZSxcbiAgc2hvd0lzTGVzc1RoYW5EZWNpbWFsc0xhYmVsID0gZmFsc2UsXG4gIGFkZENvbW1hcyA9IGZhbHNlLFxufTogRm9ybWF0QW1vdW50VHlwZSkge1xuICBpZiAoIXN0cmluZ0lzSW50ZWdlcihpbnB1dCwgZmFsc2UpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGlucHV0Jyk7XG4gIH1cblxuICBjb25zdCBpc05lZ2F0aXZlID0gbmV3IEJpZ051bWJlcihpbnB1dCkuaXNOZWdhdGl2ZSgpO1xuICBsZXQgbW9kSW5wdXQgPSBpbnB1dDtcblxuICBpZiAoaXNOZWdhdGl2ZSkge1xuICAgIC8vIHJlbW92ZSAtIGF0IHN0YXJ0IG9mIGlucHV0XG4gICAgbW9kSW5wdXQgPSBpbnB1dC5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIHBpcGUobW9kSW5wdXQgYXMgc3RyaW5nKVxuICAgICAgLy8gZm9ybWF0XG4gICAgICAudGhlbigoKSA9PlxuICAgICAgICBUb2tlblBheW1lbnQuZnVuZ2libGVGcm9tQmlnSW50ZWdlcihcbiAgICAgICAgICAnJyxcbiAgICAgICAgICBtb2RJbnB1dCBhcyBzdHJpbmcsXG4gICAgICAgICAgZGVjaW1hbHNcbiAgICAgICAgKS50b1JhdGlvbmFsTnVtYmVyKClcbiAgICAgIClcblxuICAgICAgLy8gZm9ybWF0XG4gICAgICAudGhlbigoY3VycmVudCkgPT4ge1xuICAgICAgICBjb25zdCBibkJhbGFuY2UgPSBuZXcgQmlnTnVtYmVyKGN1cnJlbnQpO1xuXG4gICAgICAgIGlmIChibkJhbGFuY2UuaXNaZXJvKCkpIHtcbiAgICAgICAgICByZXR1cm4gWkVSTztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYWxhbmNlID0gYm5CYWxhbmNlLnRvU3RyaW5nKDEwKTtcbiAgICAgICAgY29uc3QgW2ludGVnZXJQYXJ0LCBkZWNpbWFsUGFydF0gPSBiYWxhbmNlLnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IGJOZGVjaW1hbFBhcnQgPSBuZXcgQmlnTnVtYmVyKGRlY2ltYWxQYXJ0IHx8IDApO1xuXG4gICAgICAgIGNvbnN0IGRlY2ltYWxQbGFjZXMgPSBwaXBlKDApXG4gICAgICAgICAgLmlmKEJvb2xlYW4oZGVjaW1hbFBhcnQgJiYgc2hvd0xhc3ROb25aZXJvRGVjaW1hbCkpXG4gICAgICAgICAgLnRoZW4oKCkgPT4gTWF0aC5tYXgoZGVjaW1hbFBhcnQubGVuZ3RoLCBkaWdpdHMpKVxuXG4gICAgICAgICAgLmlmKGJOZGVjaW1hbFBhcnQuaXNaZXJvKCkgJiYgIXNob3dMYXN0Tm9uWmVyb0RlY2ltYWwpXG4gICAgICAgICAgLnRoZW4oMClcblxuICAgICAgICAgIC5pZihCb29sZWFuKGRlY2ltYWxQYXJ0ICYmICFzaG93TGFzdE5vblplcm9EZWNpbWFsKSlcbiAgICAgICAgICAudGhlbigoKSA9PiBNYXRoLm1pbihkZWNpbWFsUGFydC5sZW5ndGgsIGRpZ2l0cykpXG5cbiAgICAgICAgICAudmFsdWVPZigpO1xuXG4gICAgICAgIGNvbnN0IHNob3duRGVjaW1hbHNBcmVaZXJvID1cbiAgICAgICAgICBkZWNpbWFsUGFydCAmJlxuICAgICAgICAgIGRpZ2l0cyA+PSAxICYmXG4gICAgICAgICAgZGlnaXRzIDw9IGRlY2ltYWxQYXJ0Lmxlbmd0aCAmJlxuICAgICAgICAgIGJOZGVjaW1hbFBhcnQuaXNHcmVhdGVyVGhhbigwKSAmJlxuICAgICAgICAgIG5ldyBCaWdOdW1iZXIoZGVjaW1hbFBhcnQuc3Vic3RyaW5nKDAsIGRpZ2l0cykpLmlzWmVybygpO1xuXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IGJuQmFsYW5jZS50b0Zvcm1hdChkZWNpbWFsUGxhY2VzKTtcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRCYWxhbmNlID0gcGlwZShiYWxhbmNlKVxuICAgICAgICAgIC5pZihhZGRDb21tYXMpXG4gICAgICAgICAgLnRoZW4oZm9ybWF0dGVkKVxuXG4gICAgICAgICAgLmlmKEJvb2xlYW4oc2hvd25EZWNpbWFsc0FyZVplcm8pKVxuICAgICAgICAgIC50aGVuKChjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnRlZ2VyUGFydFplcm8gPSBuZXcgQmlnTnVtYmVyKGludGVnZXJQYXJ0KS5pc1plcm8oKTtcbiAgICAgICAgICAgIGNvbnN0IFtudW1lcmljUGFydCwgZGVjaW1hbFNpZGVdID0gY3VycmVudC5zcGxpdCgnLicpO1xuXG4gICAgICAgICAgICBjb25zdCB6ZXJvUGxhY2Vob2xkZXJzID0gbmV3IEFycmF5KGRpZ2l0cyAtIDEpLmZpbGwoMCk7XG4gICAgICAgICAgICBjb25zdCB6ZXJvcyA9IFsuLi56ZXJvUGxhY2Vob2xkZXJzLCAwXS5qb2luKCcnKTtcbiAgICAgICAgICAgIGNvbnN0IG1pbkFtb3VudCA9IFsuLi56ZXJvUGxhY2Vob2xkZXJzLCAxXS5qb2luKCcnKTsgLy8gMDAuLjFcblxuICAgICAgICAgICAgaWYgKCFpbnRlZ2VyUGFydFplcm8pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGAke251bWVyaWNQYXJ0fS4ke3plcm9zfWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaG93SXNMZXNzVGhhbkRlY2ltYWxzTGFiZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGA8JHtudW1lcmljUGFydH0uJHttaW5BbW91bnR9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzaG93TGFzdE5vblplcm9EZWNpbWFsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudW1lcmljUGFydDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGAke251bWVyaWNQYXJ0fS4ke2RlY2ltYWxTaWRlfWA7XG4gICAgICAgICAgfSlcblxuICAgICAgICAgIC5pZihCb29sZWFuKCFzaG93bkRlY2ltYWxzQXJlWmVybyAmJiBkZWNpbWFsUGFydCkpXG4gICAgICAgICAgLnRoZW4oKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtudW1lcmljUGFydF0gPSBjdXJyZW50LnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBsZXQgZGVjaW1hbFNpZGUgPSBkZWNpbWFsUGFydC5zdWJzdHJpbmcoMCwgZGVjaW1hbFBsYWNlcyk7XG5cbiAgICAgICAgICAgIGlmIChzaG93TGFzdE5vblplcm9EZWNpbWFsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG5vT2ZaZXJvc0F0RW5kID0gZGlnaXRzIC0gZGVjaW1hbFNpZGUubGVuZ3RoO1xuXG4gICAgICAgICAgICAgIGlmIChub09mWmVyb3NBdEVuZCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB6ZXJvUGFkZGluZyA9IEFycmF5KG5vT2ZaZXJvc0F0RW5kKS5maWxsKDApLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIGRlY2ltYWxTaWRlID0gYCR7ZGVjaW1hbFNpZGV9JHt6ZXJvUGFkZGluZ31gO1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtudW1lcmljUGFydH0uJHtkZWNpbWFsU2lkZX1gO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZGVjaW1hbFNpZGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bWVyaWNQYXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYCR7bnVtZXJpY1BhcnR9LiR7ZGVjaW1hbFNpZGV9YDtcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgLnZhbHVlT2YoKTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkQmFsYW5jZTtcbiAgICAgIH0pXG4gICAgICAuaWYoaXNOZWdhdGl2ZSlcbiAgICAgIC50aGVuKChjdXJyZW50KSA9PiBgLSR7Y3VycmVudH1gKVxuXG4gICAgICAudmFsdWVPZigpXG4gICk7XG59XG4iXX0=