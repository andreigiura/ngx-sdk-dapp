import { __decorate, __param } from "tslib";
import { Inject } from '@angular/core';
import { NativeAuthClient } from '@multiversx/sdk-native-auth-client';
import { DAPP_CONFIG } from '../../config';
import { ResetAccount } from '../../ngxs/account/account.actions';
import { ChangeTxStatus, MoveToSignedTransactions, ResetTransactions, } from '../../ngxs/account/transactions.actions';
import { TxStatusEnum } from '../../types';
export var ProvidersType;
(function (ProvidersType) {
    ProvidersType["Extension"] = "Extension";
    ProvidersType["WebWallet"] = "WebWallet";
    ProvidersType["XPortal"] = "XPortal";
    ProvidersType["Ledger"] = "Ledger";
    ProvidersType["EMPTY"] = "";
})(ProvidersType || (ProvidersType = {}));
/**
 * @ignore
 */
let GenericProvider = class GenericProvider {
    constructor(store, accountService, authenticationService, config) {
        this.store = store;
        this.accountService = accountService;
        this.authenticationService = authenticationService;
        this.config = config;
        if (this.accountService.account.currentProvider !== ProvidersType.EMPTY &&
            this.authenticationService.isAuthenticated()) {
            this.reInitialize(accountService.account);
        }
    }
    async connect(navAfterConnectRoute) {
        if (this.accountService.account.currentProvider !== ProvidersType.EMPTY &&
            this.authenticationService.isAuthenticated()) {
            throw new Error('Provider is already connected, please logout first.');
        }
        const client = new NativeAuthClient();
        const init = await client.initialize();
        return { client, init };
    }
    async logout() {
        this.store.dispatch(new ResetAccount());
        this.store.dispatch(new ResetTransactions());
        return true;
    }
    sendTransactions(transactions, txId) { }
    addSignedTransactionsToState(transactions, txId) {
        this.store.dispatch(new MoveToSignedTransactions({
            signedTransactions: transactions,
            id: txId,
        }));
    }
    addFailedTransactionsToState(txId) {
        this.store.dispatch(new ChangeTxStatus({
            id: txId,
            newStatus: TxStatusEnum.SIGNATURE_FAILED,
        }));
    }
    addToCancelledTransaction(txId) {
        this.store.dispatch(new ChangeTxStatus({
            id: txId,
            newStatus: TxStatusEnum.CANCELLED,
        }));
    }
    cancelAction() { }
    reInitialize(account) { }
};
GenericProvider = __decorate([
    __param(3, Inject(DAPP_CONFIG))
], GenericProvider);
export { GenericProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpY1Byb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNkay1kYXBwL3NyYy9saWIvc2VydmljZXMvYXV0aFByb3ZpZGVycy9nZW5lcmljUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFdEUsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFbEUsT0FBTyxFQUNMLGNBQWMsRUFDZCx3QkFBd0IsRUFDeEIsaUJBQWlCLEdBQ2xCLE1BQU0seUNBQXlDLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUkzQyxNQUFNLENBQU4sSUFBWSxhQU1YO0FBTkQsV0FBWSxhQUFhO0lBQ3ZCLHdDQUF1QixDQUFBO0lBQ3ZCLHdDQUF1QixDQUFBO0lBQ3ZCLG9DQUFtQixDQUFBO0lBQ25CLGtDQUFpQixDQUFBO0lBQ2pCLDJCQUFVLENBQUE7QUFDWixDQUFDLEVBTlcsYUFBYSxLQUFiLGFBQWEsUUFNeEI7QUFDRDs7R0FFRztBQUNJLElBQU0sZUFBZSxHQUFyQixNQUFNLGVBQWU7SUFDMUIsWUFDVSxLQUFZLEVBQ1osY0FBOEIsRUFDOUIscUJBQTRDLEVBQ3hCLE1BQWtCO1FBSHRDLFVBQUssR0FBTCxLQUFLLENBQU87UUFDWixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUN4QixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBRTlDLElBQ0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsZUFBZSxLQUFLLGFBQWEsQ0FBQyxLQUFLO1lBQ25FLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsRUFDNUM7WUFDQSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUNYLG9CQUE0QjtRQUU1QixJQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLGVBQWUsS0FBSyxhQUFhLENBQUMsS0FBSztZQUNuRSxJQUFJLENBQUMscUJBQXFCLENBQUMsZUFBZSxFQUFFLEVBQzVDO1lBQ0EsTUFBTSxJQUFJLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RDLE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRXZDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNO1FBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGdCQUFnQixDQUFDLFlBQXVDLEVBQUUsSUFBWSxJQUFHLENBQUM7SUFFMUUsNEJBQTRCLENBQzFCLFlBQXVDLEVBQ3ZDLElBQVk7UUFFWixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDakIsSUFBSSx3QkFBd0IsQ0FBQztZQUMzQixrQkFBa0IsRUFBRSxZQUFZO1lBQ2hDLEVBQUUsRUFBRSxJQUFJO1NBQ1QsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsNEJBQTRCLENBQUMsSUFBWTtRQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDakIsSUFBSSxjQUFjLENBQUM7WUFDakIsRUFBRSxFQUFFLElBQUk7WUFDUixTQUFTLEVBQUUsWUFBWSxDQUFDLGdCQUFnQjtTQUN6QyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxJQUFZO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUNqQixJQUFJLGNBQWMsQ0FBQztZQUNqQixFQUFFLEVBQUUsSUFBSTtZQUNSLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUztTQUNsQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxZQUFZLEtBQUksQ0FBQztJQUVqQixZQUFZLENBQUMsT0FBMEIsSUFBUyxDQUFDO0NBQ2xELENBQUE7QUF2RVksZUFBZTtJQUt2QixXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtHQUxYLGVBQWUsQ0F1RTNCO1NBdkVZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElQbGFpblRyYW5zYWN0aW9uT2JqZWN0LCBUcmFuc2FjdGlvbiB9IGZyb20gJ0BtdWx0aXZlcnN4L3Nkay1jb3JlL291dCc7XG5pbXBvcnQgeyBOYXRpdmVBdXRoQ2xpZW50IH0gZnJvbSAnQG11bHRpdmVyc3gvc2RrLW5hdGl2ZS1hdXRoLWNsaWVudCc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7IERhcHBDb25maWcsIERBUFBfQ09ORklHIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IFJlc2V0QWNjb3VudCB9IGZyb20gJy4uLy4uL25neHMvYWNjb3VudC9hY2NvdW50LmFjdGlvbnMnO1xuaW1wb3J0IHsgQWNjb3VudFN0YXRlTW9kZWwgfSBmcm9tICcuLi8uLi9uZ3hzL2FjY291bnQvYWNjb3VudC5zbGljZSc7XG5pbXBvcnQge1xuICBDaGFuZ2VUeFN0YXR1cyxcbiAgTW92ZVRvU2lnbmVkVHJhbnNhY3Rpb25zLFxuICBSZXNldFRyYW5zYWN0aW9ucyxcbn0gZnJvbSAnLi4vLi4vbmd4cy9hY2NvdW50L3RyYW5zYWN0aW9ucy5hY3Rpb25zJztcbmltcG9ydCB7IFR4U3RhdHVzRW51bSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWNjb3VudC9hY2NvdW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24uc2VydmljZSc7XG5cbmV4cG9ydCBlbnVtIFByb3ZpZGVyc1R5cGUge1xuICBFeHRlbnNpb24gPSAnRXh0ZW5zaW9uJyxcbiAgV2ViV2FsbGV0ID0gJ1dlYldhbGxldCcsXG4gIFhQb3J0YWwgPSAnWFBvcnRhbCcsXG4gIExlZGdlciA9ICdMZWRnZXInLFxuICBFTVBUWSA9ICcnLFxufVxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmljUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHN0b3JlOiBTdG9yZSxcbiAgICBwcml2YXRlIGFjY291bnRTZXJ2aWNlOiBBY2NvdW50U2VydmljZSxcbiAgICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlLFxuICAgIEBJbmplY3QoREFQUF9DT05GSUcpIHB1YmxpYyBjb25maWc6IERhcHBDb25maWdcbiAgKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5hY2NvdW50U2VydmljZS5hY2NvdW50LmN1cnJlbnRQcm92aWRlciAhPT0gUHJvdmlkZXJzVHlwZS5FTVBUWSAmJlxuICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKClcbiAgICApIHtcbiAgICAgIHRoaXMucmVJbml0aWFsaXplKGFjY291bnRTZXJ2aWNlLmFjY291bnQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3QoXG4gICAgbmF2QWZ0ZXJDb25uZWN0Um91dGU6IHN0cmluZ1xuICApOiBQcm9taXNlPHsgY2xpZW50OiBOYXRpdmVBdXRoQ2xpZW50OyBpbml0OiBzdHJpbmcgfT4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMuYWNjb3VudFNlcnZpY2UuYWNjb3VudC5jdXJyZW50UHJvdmlkZXIgIT09IFByb3ZpZGVyc1R5cGUuRU1QVFkgJiZcbiAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVyIGlzIGFscmVhZHkgY29ubmVjdGVkLCBwbGVhc2UgbG9nb3V0IGZpcnN0LicpO1xuICAgIH1cbiAgICBjb25zdCBjbGllbnQgPSBuZXcgTmF0aXZlQXV0aENsaWVudCgpO1xuICAgIGNvbnN0IGluaXQgPSBhd2FpdCBjbGllbnQuaW5pdGlhbGl6ZSgpO1xuXG4gICAgcmV0dXJuIHsgY2xpZW50LCBpbml0IH07XG4gIH1cblxuICBhc3luYyBsb2dvdXQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChuZXcgUmVzZXRBY2NvdW50KCkpO1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gobmV3IFJlc2V0VHJhbnNhY3Rpb25zKCkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc2VuZFRyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbnM6IElQbGFpblRyYW5zYWN0aW9uT2JqZWN0W10sIHR4SWQ6IG51bWJlcikge31cblxuICBhZGRTaWduZWRUcmFuc2FjdGlvbnNUb1N0YXRlKFxuICAgIHRyYW5zYWN0aW9uczogSVBsYWluVHJhbnNhY3Rpb25PYmplY3RbXSxcbiAgICB0eElkOiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChcbiAgICAgIG5ldyBNb3ZlVG9TaWduZWRUcmFuc2FjdGlvbnMoe1xuICAgICAgICBzaWduZWRUcmFuc2FjdGlvbnM6IHRyYW5zYWN0aW9ucyxcbiAgICAgICAgaWQ6IHR4SWQsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBhZGRGYWlsZWRUcmFuc2FjdGlvbnNUb1N0YXRlKHR4SWQ6IG51bWJlcikge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICBuZXcgQ2hhbmdlVHhTdGF0dXMoe1xuICAgICAgICBpZDogdHhJZCxcbiAgICAgICAgbmV3U3RhdHVzOiBUeFN0YXR1c0VudW0uU0lHTkFUVVJFX0ZBSUxFRCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGFkZFRvQ2FuY2VsbGVkVHJhbnNhY3Rpb24odHhJZDogbnVtYmVyKSB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChcbiAgICAgIG5ldyBDaGFuZ2VUeFN0YXR1cyh7XG4gICAgICAgIGlkOiB0eElkLFxuICAgICAgICBuZXdTdGF0dXM6IFR4U3RhdHVzRW51bS5DQU5DRUxMRUQsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBjYW5jZWxBY3Rpb24oKSB7fVxuXG4gIHJlSW5pdGlhbGl6ZShhY2NvdW50OiBBY2NvdW50U3RhdGVNb2RlbCk6IHZvaWQge31cbn1cbiJdfQ==