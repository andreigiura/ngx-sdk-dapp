import { __decorate } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Select } from '@ngxs/store';
import { lastValueFrom, map, skipWhile, take, } from 'rxjs';
import { DAPP_CONFIG } from '../../config';
import { AddTransactionsBatch, ChangeTxStatus, RemoveTransaction, ResetTransactions, SetTransactionHashes, } from '../../ngxs/account/transactions.actions';
import { TxStatusEnum } from '../../types';
import * as i0 from "@angular/core";
import * as i1 from "../authProviders/PermissionsProvider";
import * as i2 from "@ngxs/store";
import * as i3 from "../../ngxs/account/account-api.service";
import * as i4 from "../account/account.service";
import * as i5 from "../../pipes/parseAmount/parse-amount.pipe";
export class TransactionsService {
    constructor(permissionsProvider, store, accountApi, accountService, parseAmount, config) {
        this.permissionsProvider = permissionsProvider;
        this.store = store;
        this.accountApi = accountApi;
        this.accountService = accountService;
        this.parseAmount = parseAmount;
        this.config = config;
        this.toasts = [];
        this.toastTemplate = null;
        this.trackedTransactions = [];
        setTimeout(() => {
            this.transactions$?.subscribe((state) => {
                for (const transaction of state.transactions) {
                    if (transaction.status === TxStatusEnum.SIGNED &&
                        !transaction.options.signOnly) {
                        this.sendTxToAPI(transaction.transactions, transaction.id);
                    }
                    if (transaction.status === TxStatusEnum.SIGNATURE_FAILED ||
                        transaction.status === TxStatusEnum.CANCELLED ||
                        transaction.status === TxStatusEnum.SEND_IN_PROGRESS ||
                        transaction.status === TxStatusEnum.SENT_SUCCESS ||
                        transaction.status === TxStatusEnum.SENT_ERROR) {
                        const transactionsInfo = transaction.transactionsHashes?.map((txHash) => ({
                            txHash: txHash,
                            status: TxStatusEnum.SEND_IN_PROGRESS,
                        }));
                        this.show(transaction.options.transactionTitle, transactionsInfo || [], transaction.id, transaction.status);
                        if (transaction.transactionsHashes?.length &&
                            !this.trackedTransactions.includes(transaction.id)) {
                            this.trackedTransactions.push(transaction.id);
                            this.trackTransactionStatus(transaction);
                        }
                    }
                }
            });
        }, 1000);
    }
    async trackTransactionStatus(transaction) {
        if (!transaction.transactionsHashes)
            return;
        try {
            const txStatuses = await lastValueFrom(this.accountApi.trackTransactions(transaction.transactionsHashes));
            const shouldContinueTracking = this.updateToastStatus(txStatuses, transaction.id);
            if (shouldContinueTracking) {
                setTimeout(() => {
                    this.trackTransactionStatus(transaction);
                }, 6000);
            }
        }
        catch (error) { }
    }
    watchTransactionByTitle(txTitle, watchForStatus) {
        if (this.transactions$ === undefined)
            throw new Error('transactions$ is undefined');
        return this.transactions$
            .pipe(map((state) => {
            const tx = state.transactions.filter((tx) => {
                return tx.options.transactionTitle === txTitle;
            });
            return tx[0];
        }))
            .pipe(skipWhile((tx) => !tx || tx.status !== watchForStatus))
            .pipe(take(1));
    }
    hasTransactionsInProgress() {
        if (this.transactions$ === undefined)
            throw new Error('transactions$ is undefined');
        return this.transactions$.pipe(map((transaction) => transaction.transactions.some((tx) => {
            return tx.status === TxStatusEnum.SEND_IN_PROGRESS;
        })));
    }
    updateToastStatus(txHashesStatus, transactionId) {
        let shouldContinueTracking = false;
        this.toasts.map((toast) => {
            if (toast.id === transactionId) {
                for (let i in txHashesStatus) {
                    switch (txHashesStatus[i].status) {
                        case 'fail':
                            this.store.dispatch(new ChangeTxStatus({
                                id: transactionId,
                                newStatus: TxStatusEnum.SENT_ERROR,
                            }));
                            toast.transactionsInfo[i].status = TxStatusEnum.SENT_ERROR;
                            break;
                        case 'success':
                            this.store.dispatch(new ChangeTxStatus({
                                id: transactionId,
                                newStatus: TxStatusEnum.SENT_SUCCESS,
                            }));
                            toast.transactionsInfo[i].status = TxStatusEnum.SENT_SUCCESS;
                            break;
                        default:
                            break;
                    }
                }
                const shouldContinue = toast.transactionsInfo.some((tx) => tx.status === TxStatusEnum.SEND_IN_PROGRESS);
                const shouldSetSuccess = toast.transactionsInfo.every((tx) => tx.status === TxStatusEnum.SENT_SUCCESS);
                const shouldSetError = toast.transactionsInfo.some((tx) => tx.status === TxStatusEnum.SENT_ERROR);
                if (shouldSetError) {
                    toast.status = TxStatusEnum.SENT_ERROR;
                }
                if (shouldSetSuccess) {
                    toast.status = TxStatusEnum.SENT_SUCCESS;
                }
                shouldContinueTracking = shouldContinue;
            }
            return false;
        });
        if (!shouldContinueTracking) {
            this.accountService.refetchAccountData();
        }
        return shouldContinueTracking;
    }
    async sendTxToAPI(transactions, transactionsId) {
        this.store.dispatch(new ChangeTxStatus({
            newStatus: TxStatusEnum.READY_TO_SEND,
            id: transactionsId,
        }));
        try {
            const { data: { txsHashes, numOfSentTxs }, error, } = await lastValueFrom(this.accountApi.sendTransactions(transactions));
            const hashesArray = Object.values(txsHashes);
            if (error ||
                !txsHashes ||
                numOfSentTxs === 0 ||
                hashesArray.length === 0) {
                this.store.dispatch(new ChangeTxStatus({
                    newStatus: TxStatusEnum.SENT_ERROR,
                    id: transactionsId,
                }));
                return;
            }
            this.store.dispatch(new SetTransactionHashes({
                id: transactionsId,
                hashes: hashesArray,
            }));
            this.store.dispatch(new ChangeTxStatus({
                newStatus: TxStatusEnum.SEND_IN_PROGRESS,
                id: transactionsId,
            }));
        }
        catch (error) {
            this.store.dispatch(new ChangeTxStatus({
                newStatus: TxStatusEnum.SENT_ERROR,
                id: transactionsId,
            }));
        }
    }
    sendTransactions(transactions, txOptions) {
        const txId = Date.now();
        const transactionsToSend = transactions.map((tx, index) => ({
            ...tx,
            nonce: this.accountService.account.nonce + index,
            sender: this.accountService.account.address,
            data: Buffer.from(tx.data ?? '', 'utf8').toString('base64'),
            value: this.parseAmount.transform(tx.value),
            chainID: this.config.chainID,
            //TODO: change version if needed (ledger, guardians, etc)
            version: 1,
        }));
        this.store.dispatch(new AddTransactionsBatch({
            id: txId,
            transactions: transactionsToSend,
            status: TxStatusEnum.PENDING_SIGNATURE,
            options: txOptions,
        }));
        this.permissionsProvider.sendTransactions(transactionsToSend, txId);
        return txId;
    }
    show(header, transactionsInfo, txId, status) {
        if (!this.toastTemplate)
            throw new Error('TransactionsService: toastTemplate is not set');
        if (this.toasts.find((t) => t.id === txId))
            return;
        this.toasts.push({
            id: txId,
            header,
            status,
            transactionsInfo,
            templateRef: this.toastTemplate,
        });
    }
    remove(toastId) {
        this.store.dispatch(new RemoveTransaction({ id: toastId }));
        this.toasts = this.toasts.filter((t) => t.id != toastId);
    }
    setTxTemplate(template) {
        this.toastTemplate = template;
    }
    resetToInitialState() {
        this.store.dispatch(new ResetTransactions());
    }
}
TransactionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: TransactionsService, deps: [{ token: i1.PermissionsProviderService }, { token: i2.Store }, { token: i3.AccountApiService }, { token: i4.AccountService }, { token: i5.ParseAmountPipe }, { token: DAPP_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
TransactionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: TransactionsService, providedIn: 'root' });
__decorate([
    Select()
], TransactionsService.prototype, "transactions$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: TransactionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.PermissionsProviderService }, { type: i2.Store }, { type: i3.AccountApiService }, { type: i4.AccountService }, { type: i5.ParseAmountPipe }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DAPP_CONFIG]
                }] }]; }, propDecorators: { transactions$: [] } });
//# sourceMappingURL=data:application/json;base64,