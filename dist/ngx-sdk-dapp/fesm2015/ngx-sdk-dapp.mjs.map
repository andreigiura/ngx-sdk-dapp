{"version":3,"file":"ngx-sdk-dapp.mjs","sources":["../../../projects/ngx-sdk-dapp/src/lib/config.ts","../../../projects/ngx-sdk-dapp/src/lib/ngxs/account/account.actions.ts","../../../projects/ngx-sdk-dapp/src/lib/ngxs/account/transactions.actions.ts","../../../projects/ngx-sdk-dapp/src/lib/types/index.ts","../../../projects/ngx-sdk-dapp/src/lib/services/authProviders/genericProvider.ts","../../../projects/ngx-sdk-dapp/src/lib/services/account/account.service.ts","../../../projects/ngx-sdk-dapp/src/lib/ngxs/account/account-api.service.ts","../../../projects/ngx-sdk-dapp/src/lib/ngxs/account/account.slice.ts","../../../projects/ngx-sdk-dapp/src/lib/constants.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/pipe.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/stringIsInteger.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/formatAmount.ts","../../../projects/ngx-sdk-dapp/src/lib/pipes/formatAmount/format-amount.pipe.ts","../../../projects/ngx-sdk-dapp/src/lib/services/authentication/authentication.service.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/canActivate.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/base64Utils.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/decodeLoginToken.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/decodeNativeAuthToken.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/parseAmount.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/addressIsValid.ts","../../../projects/ngx-sdk-dapp/src/lib/helpers/isContract.ts","../../../projects/ngx-sdk-dapp/src/lib/pipes/parseAmount/parse-amount.pipe.ts","../../../projects/ngx-sdk-dapp/src/lib/ngxs/account/transactions.slice.ts","../../../projects/ngx-sdk-dapp/src/lib/pipes/trimStr/trim-str.pipe.ts","../../../projects/ngx-sdk-dapp/src/lib/pipes/timeAgo/time-ago.pipe.ts","../../../projects/ngx-sdk-dapp/src/lib/pipes/addressToFormattedBalance/address-to-formatted-balance.pipe.ts","../../../projects/ngx-sdk-dapp/src/lib/ngx-sdk-dapp.module.ts","../../../projects/ngx-sdk-dapp/src/lib/services/interceptors/nativeAuthTokenInterceptor/native-auth-token-interceptor.service.ts","../../../projects/ngx-sdk-dapp/src/lib/services/authProviders/extension/extensionProvider.service.ts","../../../projects/ngx-sdk-dapp/src/lib/services/authProviders/webWallet/web-walletProvider.service.ts","../../../projects/ngx-sdk-dapp/src/lib/services/authProviders/xPortal/x-portal.service.ts","../../../projects/ngx-sdk-dapp/src/lib/services/authProviders/ledger/ledger-provider.service.ts","../../../projects/ngx-sdk-dapp/src/lib/services/authProviders/PermissionsProvider.ts","../../../projects/ngx-sdk-dapp/src/lib/services/transactions/transactions.service.ts","../../../projects/ngx-sdk-dapp/src/public-api.ts","../../../projects/ngx-sdk-dapp/src/ngx-sdk-dapp.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\ninterface AuthApis {\n  [index: string]: string;\n}\n\nexport const DAPP_CONFIG = new InjectionToken<DappConfig>('config');\nexport interface DappConfig {\n  apiURL: string;\n  gatewayURL: string;\n  walletURL: string;\n  explorerURL: string;\n  chainID: string;\n  nativeAuthAPIs: AuthApis;\n  walletConnectDeepLink: string;\n  walletConnectV2ProjectId: string;\n  walletConnectV2RelayAddresses: string[];\n}\n","import { AccountStateModel } from './account.slice';\n\nexport class PatchAccount {\n  static readonly type = '[Account] Set Account partial data';\n  constructor(public payload: Partial<AccountStateModel>) {}\n}\n\nexport class LoginAccount {\n  static readonly type = '[Account] Set Account partial data';\n  constructor(public payload: Partial<AccountStateModel>) {}\n}\n\nexport class ResetAccount {\n  static readonly type = '[Account] Reset Account';\n}\n\nexport class RefetchAccountData {\n  static readonly type = '[Account] refetch Account data';\n}\n","import { IPlainTransactionObject } from '@multiversx/sdk-core/out';\nimport { SingleTransactionModel } from './transactions.slice';\n\nexport class AddTransactionsBatch {\n  static readonly type = '[Transactions] Add Transactions Batch';\n  constructor(public payload: SingleTransactionModel) {}\n}\n\nexport class MoveToSignedTransactions {\n  static readonly type = '[Transactions] Move to signed Transactions';\n  constructor(\n    public payload: {\n      id: number;\n      signedTransactions: IPlainTransactionObject[];\n    }\n  ) {}\n}\n\nexport class ResetTransactions {\n  static readonly type = '[Transactions] Reset Transactions';\n}\n\nexport class ChangeTxStatus {\n  static readonly type = '[Transactions] Move to failed Transactions';\n  constructor(public payload: { id: number; newStatus: string }) {}\n}\n\nexport class RemoveTransaction {\n  static readonly type = '[Transactions] Remove Transaction';\n  constructor(public payload: { id: number }) {}\n}\n\nexport class SetTransactionHashes {\n  static readonly type = '[Transactions] Set Transaction Hashes';\n  constructor(public payload: { id: number; hashes: string[] }) {}\n}\n\nexport class CancelPendingSignature {\n  static readonly type = '[Transactions] Cancel Pending Signature';\n}\n","export enum TxStatusEnum {\n  PENDING_SIGNATURE = 'pendingSignature',\n  SIGNATURE_FAILED = 'signatureFailed',\n  CANCELLED = 'cancelled',\n  SIGNED = 'signed',\n  READY_TO_SEND = 'readyToSend',\n  SEND_IN_PROGRESS = 'sendInProgress',\n  SENT_SUCCESS = 'sentSuccess',\n  SENT_ERROR = 'sentError',\n}\n","import { Inject } from '@angular/core';\nimport { IPlainTransactionObject, Transaction } from '@multiversx/sdk-core/out';\nimport { NativeAuthClient } from '@multiversx/sdk-native-auth-client';\nimport { Store } from '@ngxs/store';\nimport { DappConfig, DAPP_CONFIG } from '../../config';\nimport { ResetAccount } from '../../ngxs/account/account.actions';\nimport { AccountStateModel } from '../../ngxs/account/account.slice';\nimport {\n  ChangeTxStatus,\n  MoveToSignedTransactions,\n  ResetTransactions,\n} from '../../ngxs/account/transactions.actions';\nimport { TxStatusEnum } from '../../types';\nimport { AccountService } from '../account/account.service';\nimport { AuthenticationService } from '../authentication/authentication.service';\n\nexport enum ProvidersType {\n  Extension = 'Extension',\n  WebWallet = 'WebWallet',\n  XPortal = 'XPortal',\n  Ledger = 'Ledger',\n  EMPTY = '',\n}\n/**\n * @ignore\n */\nexport class GenericProvider {\n  constructor(\n    private store: Store,\n    private accountService: AccountService,\n    private authenticationService: AuthenticationService,\n    @Inject(DAPP_CONFIG) public config: DappConfig\n  ) {\n    if (\n      this.accountService.account.currentProvider !== ProvidersType.EMPTY &&\n      this.authenticationService.isAuthenticated()\n    ) {\n      this.reInitialize(accountService.account);\n    }\n  }\n\n  async connect(\n    navAfterConnectRoute: string\n  ): Promise<{ client: NativeAuthClient; init: string }> {\n    if (\n      this.accountService.account.currentProvider !== ProvidersType.EMPTY &&\n      this.authenticationService.isAuthenticated()\n    ) {\n      throw new Error('Provider is already connected, please logout first.');\n    }\n    const client = new NativeAuthClient();\n    const init = await client.initialize();\n\n    return { client, init };\n  }\n\n  async logout(): Promise<boolean> {\n    this.store.dispatch(new ResetAccount());\n    this.store.dispatch(new ResetTransactions());\n    return true;\n  }\n\n  sendTransactions(transactions: IPlainTransactionObject[], txId: number) {}\n\n  addSignedTransactionsToState(\n    transactions: IPlainTransactionObject[],\n    txId: number\n  ) {\n    this.store.dispatch(\n      new MoveToSignedTransactions({\n        signedTransactions: transactions,\n        id: txId,\n      })\n    );\n  }\n\n  addFailedTransactionsToState(txId: number) {\n    this.store.dispatch(\n      new ChangeTxStatus({\n        id: txId,\n        newStatus: TxStatusEnum.SIGNATURE_FAILED,\n      })\n    );\n  }\n\n  addToCancelledTransaction(txId: number) {\n    this.store.dispatch(\n      new ChangeTxStatus({\n        id: txId,\n        newStatus: TxStatusEnum.CANCELLED,\n      })\n    );\n  }\n\n  cancelAction() {}\n\n  reInitialize(account: AccountStateModel): void {}\n}\n","import { Injectable } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport {\n  AccountInitialState,\n  AccountStateModel,\n} from '../../ngxs/account/account.slice';\nimport {\n  LoginAccount,\n  PatchAccount,\n  RefetchAccountData,\n  ResetAccount,\n} from '../../ngxs/account/account.actions';\nimport {\n  ActionsExecuting,\n  actionsExecuting,\n} from '@ngxs-labs/actions-executing';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n  @Select() public account$: Observable<AccountStateModel> | undefined;\n  @Select(actionsExecuting([LoginAccount, RefetchAccountData]))\n  accountDataLoading$: Observable<ActionsExecuting[]> | undefined;\n\n  public account: AccountStateModel = AccountInitialState;\n\n  constructor(private store: Store) {\n    this.account$?.subscribe((account) => {\n      this.account = account;\n    });\n  }\n  public refetchAccountData() {\n    this.store.dispatch(new RefetchAccountData());\n  }\n\n  public resetToInitialState() {\n    this.store.dispatch(new ResetAccount());\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { IPlainTransactionObject } from '@multiversx/sdk-core/out';\nimport { Observable } from 'rxjs';\nimport { DappConfig, DAPP_CONFIG } from '../../config';\nimport { AccountService } from '../../services/account/account.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountApiService {\n  constructor(\n    private http: HttpClient,\n    private accountService: AccountService,\n    @Inject(DAPP_CONFIG) public config: DappConfig\n  ) {}\n\n  getAccount(address: string): Observable<any> {\n    return this.http.get(`${this.config.apiURL}/accounts/${address}`);\n  }\n\n  sendTransactions(transactions: IPlainTransactionObject[]) {\n    return this.http.post(\n      `${this.config.gatewayURL}/transaction/send-multiple`,\n      transactions\n    );\n  }\n\n  trackTransactions(transactionHashes: string[]) {\n    return this.http.get(\n      `${this.config.apiURL}/accounts/${\n        this.accountService.account.address\n      }/transactions?hashes=${transactionHashes.join(\n        ','\n      )}&fields=status&withScResults=true`\n    );\n  }\n\n  getTransactions(listSize: number, sender: string, receiver: string) {\n    return this.http.get(\n      `${this.config.apiURL}/transactions?size=${listSize}&sender=${sender}&receiver=${receiver}&condition=must&fields=txHash%2Ctimestamp%2Csender%2CsenderShard%2Creceiver%2CreceiverShard%2Cstatus%2Cvalue%2Cfunction`\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { lastValueFrom } from 'rxjs';\nimport { ProvidersType } from '../../services/authProviders/genericProvider';\nimport { AccountApiService } from './account-api.service';\nimport {\n  LoginAccount,\n  PatchAccount,\n  RefetchAccountData,\n  ResetAccount,\n} from './account.actions';\n\nexport interface AccountStateModel {\n  address: string;\n  accessToken: string;\n  currentProvider: ProvidersType | '';\n  shard: number | null;\n  balance: string;\n  loginTimestamp: number;\n  nonce: number;\n  ledgerIndex?: number;\n}\nexport const AccountInitialState = {\n  address: '',\n  accessToken: '',\n  currentProvider: ProvidersType.EMPTY,\n  shard: null,\n  balance: '',\n  loginTimestamp: 0,\n  nonce: 0,\n};\n\n@State<AccountStateModel>({\n  name: 'account',\n  defaults: AccountInitialState,\n})\n@Injectable()\nexport class AccountState {\n  constructor(public accountApi: AccountApiService) {}\n\n  @Action(PatchAccount)\n  async patchAccount(\n    { patchState }: StateContext<AccountStateModel>,\n    { payload }: PatchAccount\n  ) {\n    patchState(payload);\n  }\n\n  @Action(LoginAccount)\n  async loginAccount(\n    { patchState }: StateContext<AccountStateModel>,\n    { payload }: LoginAccount\n  ) {\n    if (!payload.address) return;\n    patchState({ loginTimestamp: Date.now() });\n    const { shard, balance } = await lastValueFrom<any>(\n      this.accountApi.getAccount(payload.address)\n    );\n    patchState({ ...payload, shard, balance });\n  }\n\n  @Action(RefetchAccountData)\n  async refetchAccountData({\n    patchState,\n    getState,\n  }: StateContext<AccountStateModel>) {\n    const state = getState();\n    if (state.address) {\n      const { shard, balance, nonce } = await lastValueFrom<any>(\n        this.accountApi.getAccount(state.address)\n      );\n      patchState({ shard, balance, nonce });\n    }\n  }\n\n  @Action(ResetAccount)\n  async resetAccount({ setState }: StateContext<AccountStateModel>) {\n    setState(AccountInitialState);\n  }\n}\n","export const GAS_PRICE_MODIFIER = 0.01;\nexport const GAS_PER_DATA_BYTE = 1_500;\nexport const GAS_LIMIT = 50_000;\nexport const GAS_PRICE = 1_000_000_000;\nexport const DECIMALS = 18;\nexport const DIGITS = 4;\nexport const ZERO = '0';\nexport const MULTIVERSX_CANCEL_ACTION = 'multiversx_cancelAction';\nexport const ERD_CANCEL_ACTION = 'erd_cancelAction';\n","export function pipe<ValueType>(previous: ValueType) {\n  return {\n    if: function (condition: boolean) {\n      if (condition) {\n        return {\n          then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n            // if a callback is passed, callback is executed with previous value\n            newValue instanceof Function\n              ? pipe(newValue(previous))\n              : pipe(newValue)\n        };\n      } else {\n        return {\n          then: () => pipe(previous)\n        };\n      }\n    },\n\n    then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n      newValue instanceof Function ? pipe(newValue(previous)) : pipe(newValue),\n\n    valueOf: function () {\n      return previous;\n    }\n  };\n}\n","import BigNumber from 'bignumber.js';\n\nexport const stringIsInteger = (\n  integer: string,\n  positiveNumbersOnly = true\n) => {\n  const stringInteger = String(integer);\n  if (!stringInteger.match(/^[-]?\\d+$/)) {\n    return false;\n  }\n  const bNparsed = new BigNumber(stringInteger);\n  const limit = positiveNumbersOnly ? 0 : -1;\n  return (\n    bNparsed.toString(10) === stringInteger && bNparsed.comparedTo(0) >= limit\n  );\n};\n","import { TokenPayment } from '@multiversx/sdk-core';\nimport BigNumber from 'bignumber.js';\nimport { DECIMALS, DIGITS, ZERO } from '../constants';\nimport { pipe } from './pipe';\nimport { stringIsInteger } from './stringIsInteger';\n\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\nexport interface FormatAmountType {\n  input: string;\n  decimals?: number;\n  digits?: number;\n  showIsLessThanDecimalsLabel?: boolean;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport function formatAmount({\n  input,\n  decimals = DECIMALS,\n  digits = DIGITS,\n  showLastNonZeroDecimal = false,\n  showIsLessThanDecimalsLabel = false,\n  addCommas = false,\n}: FormatAmountType) {\n  if (!stringIsInteger(input, false)) {\n    throw new Error('Invalid input');\n  }\n\n  const isNegative = new BigNumber(input).isNegative();\n  let modInput = input;\n\n  if (isNegative) {\n    // remove - at start of input\n    modInput = input.substring(1);\n  }\n\n  return (\n    pipe(modInput as string)\n      // format\n      .then(() =>\n        TokenPayment.fungibleFromBigInteger(\n          '',\n          modInput as string,\n          decimals\n        ).toRationalNumber()\n      )\n\n      // format\n      .then((current) => {\n        const bnBalance = new BigNumber(current);\n\n        if (bnBalance.isZero()) {\n          return ZERO;\n        }\n        const balance = bnBalance.toString(10);\n        const [integerPart, decimalPart] = balance.split('.');\n        const bNdecimalPart = new BigNumber(decimalPart || 0);\n\n        const decimalPlaces = pipe(0)\n          .if(Boolean(decimalPart && showLastNonZeroDecimal))\n          .then(() => Math.max(decimalPart.length, digits))\n\n          .if(bNdecimalPart.isZero() && !showLastNonZeroDecimal)\n          .then(0)\n\n          .if(Boolean(decimalPart && !showLastNonZeroDecimal))\n          .then(() => Math.min(decimalPart.length, digits))\n\n          .valueOf();\n\n        const shownDecimalsAreZero =\n          decimalPart &&\n          digits >= 1 &&\n          digits <= decimalPart.length &&\n          bNdecimalPart.isGreaterThan(0) &&\n          new BigNumber(decimalPart.substring(0, digits)).isZero();\n\n        const formatted = bnBalance.toFormat(decimalPlaces);\n\n        const formattedBalance = pipe(balance)\n          .if(addCommas)\n          .then(formatted)\n\n          .if(Boolean(shownDecimalsAreZero))\n          .then((current) => {\n            const integerPartZero = new BigNumber(integerPart).isZero();\n            const [numericPart, decimalSide] = current.split('.');\n\n            const zeroPlaceholders = new Array(digits - 1).fill(0);\n            const zeros = [...zeroPlaceholders, 0].join('');\n            const minAmount = [...zeroPlaceholders, 1].join(''); // 00..1\n\n            if (!integerPartZero) {\n              return `${numericPart}.${zeros}`;\n            }\n\n            if (showIsLessThanDecimalsLabel) {\n              return `<${numericPart}.${minAmount}`;\n            }\n\n            if (!showLastNonZeroDecimal) {\n              return numericPart;\n            }\n\n            return `${numericPart}.${decimalSide}`;\n          })\n\n          .if(Boolean(!shownDecimalsAreZero && decimalPart))\n          .then((current) => {\n            const [numericPart] = current.split('.');\n            let decimalSide = decimalPart.substring(0, decimalPlaces);\n\n            if (showLastNonZeroDecimal) {\n              const noOfZerosAtEnd = digits - decimalSide.length;\n\n              if (noOfZerosAtEnd > 0) {\n                const zeroPadding = Array(noOfZerosAtEnd).fill(0).join('');\n                decimalSide = `${decimalSide}${zeroPadding}`;\n                return `${numericPart}.${decimalSide}`;\n              }\n\n              return current;\n            }\n\n            if (!decimalSide) {\n              return numericPart;\n            }\n\n            return `${numericPart}.${decimalSide}`;\n          })\n\n          .valueOf();\n\n        return formattedBalance;\n      })\n      .if(isNegative)\n      .then((current) => `-${current}`)\n\n      .valueOf()\n  );\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { formatAmount, FormatAmountType } from '../../helpers/formatAmount';\n\n@Pipe({\n  name: 'formatAmount',\n})\nexport class FormatAmountPipe implements PipeTransform {\n  transform(value: string, formatOptions: FormatAmountType | {} = {}): unknown {\n    return formatAmount({ ...formatOptions, input: value });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { decodeNativeAuthToken } from '../../helpers';\nimport { AccountService } from '../account/account.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  constructor(private accountService: AccountService) {}\n\n  isAuthenticated(): boolean {\n    const decoded = decodeNativeAuthToken(\n      this.accountService.account.accessToken\n    );\n    if (!decoded) return false;\n    const millisecondsTTL = decoded.ttl * 1000;\n    const isTokenValid =\n      this.accountService.account.loginTimestamp +\n        millisecondsTTL -\n        Date.now() >\n      0;\n\n    return isTokenValid;\n  }\n}\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport {\n  AccountService,\n  PermissionsProviderService,\n  TransactionsService,\n} from '../../public-api';\nimport { AuthenticationService } from '../services/authentication/authentication.service';\n\nexport const canActivateRoute: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  const isAuthenticated = inject(AuthenticationService).isAuthenticated();\n  if (!isAuthenticated) {\n    const router = inject(Router);\n\n    inject(AccountService).resetToInitialState();\n    inject(TransactionsService).resetToInitialState();\n    router.navigate(['/']);\n  }\n  return isAuthenticated;\n};\n","export function isStringBase64(string: string) {\n  try {\n    return Buffer.from(string, 'base64').toString() === atob(string);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function encodeToBase64(string: string) {\n  return btoa(string);\n}\n\nexport function decodeBase64(string: string) {\n  if (!isStringBase64(string)) {\n    return string;\n  }\n\n  return atob(string);\n}\n","import { decodeBase64 } from './base64Utils';\nimport { isString } from 'lodash';\n\nexport interface DecodedLoginTokenType {\n  blockHash: string;\n  extraInfo?: { timestamp: number };\n  origin: string;\n  ttl: number;\n}\n\nexport const decodeLoginToken = (\n  loginToken: string\n): DecodedLoginTokenType | null => {\n  if (!loginToken || !isString(loginToken)) {\n    return null;\n  }\n\n  const parts = loginToken.split('.');\n\n  if (parts.length !== 4) {\n    console.error(\n      'Invalid loginToken. You may be trying to decode a nativeAuthToken. Try using decodeNativeAuthToken method instead'\n    );\n\n    return null;\n  }\n\n  try {\n    const [origin, blockHash, ttl, extraInfo] = parts;\n    const parsedExtraInfo = JSON.parse(decodeBase64(extraInfo));\n    const parsedOrigin = decodeBase64(origin);\n\n    return {\n      ttl: Number(ttl),\n      extraInfo: parsedExtraInfo,\n      origin: parsedOrigin,\n      blockHash,\n    };\n  } catch (e) {\n    console.error(`Error trying to decode ${loginToken}:`, e);\n\n    return null;\n  }\n};\n","import { decodeBase64 } from './base64Utils';\nimport { DecodedLoginTokenType, decodeLoginToken } from './decodeLoginToken';\n\nfunction isString(x: any) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n\ninterface DecodedNativeAuthTokenType extends DecodedLoginTokenType {\n  address: string;\n  body: string;\n  signature: string;\n}\n\nexport const decodeNativeAuthToken = (\n  accessToken?: string\n): DecodedNativeAuthTokenType | null => {\n  if (!accessToken || !isString(accessToken)) {\n    return null;\n  }\n\n  const parts = accessToken.split('.');\n\n  if (parts.length !== 3) {\n    console.error(\n      'Invalid nativeAuthToken. You may be trying to decode a loginToken. Try using decodeLoginToken method instead'\n    );\n\n    return null;\n  }\n\n  try {\n    const [address, body, signature] = parts;\n    const parsedAddress = decodeBase64(address);\n    const parsedBody = decodeBase64(body);\n    const parsedInitToken = decodeLoginToken(parsedBody);\n\n    if (!parsedInitToken) {\n      return {\n        address: parsedAddress,\n        body: parsedBody,\n        signature,\n        blockHash: '',\n        origin: '',\n        ttl: 0,\n      };\n    }\n\n    const result = {\n      ...parsedInitToken,\n      address: parsedAddress,\n      body: parsedBody,\n      signature,\n    };\n\n    // if empty object, delete extraInfo\n    if (!parsedInitToken.extraInfo?.timestamp) {\n      delete result.extraInfo;\n    }\n\n    return result;\n  } catch (err) {\n    return null;\n  }\n};\n","import { TokenPayment } from '@multiversx/sdk-core';\nimport { DECIMALS } from '../constants';\n\nexport function parseAmount(amount: string, decimals: number = DECIMALS) {\n  return TokenPayment.fungibleFromAmount('', amount, decimals).toString();\n}\n","import { Address } from '@multiversx/sdk-core';\n\nfunction canTransformToPublicKey(address: string) {\n  try {\n    const checkAddress = new Address(address);\n    return Boolean(checkAddress.bech32());\n  } catch {\n    return false;\n  }\n}\n\nexport function addressIsValid(destinationAddress: string) {\n  const isValidBach =\n    destinationAddress?.startsWith('erd') &&\n    destinationAddress.length === 62 &&\n    /^\\w+$/.test(destinationAddress);\n\n  return isValidBach && canTransformToPublicKey(destinationAddress);\n}\n","import { Address, TransactionPayload } from '@multiversx/sdk-core/out';\nimport { addressIsValid } from './addressIsValid';\nimport { isStringBase64 } from './base64Utils';\n\nexport enum TypesOfSmartContractCallsEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer',\n}\n\nexport const ESDTTransferTypes = [\n  'ESDTNFTTransfer',\n  'ESDTNFTBurn',\n  'ESDTNFTAddQuantity',\n  'ESDTNFTCreate',\n  'MultiESDTNFTTransfer',\n  'ESDTTransfer',\n  'ESDTBurn',\n  'ESDTLocalMint',\n  'ESDTLocalBurn',\n  'ESDTWipe',\n  'ESDTFreeze',\n];\n\nexport function isContract(\n  receiver: string,\n  sender?: string,\n  data = ''\n): boolean {\n  const isValid = addressIsValid(receiver);\n\n  if (!isValid) {\n    return false;\n  }\n\n  const isContract = new Address(receiver).isContractAddress();\n\n  if (isContract) {\n    return true;\n  }\n\n  const extractedAddress = getAddressFromDataField({ receiver, data });\n\n  if (!extractedAddress) {\n    return false;\n  }\n\n  const isExtractedAddressContractCall = new Address(\n    extractedAddress\n  ).isContractAddress();\n\n  return (\n    isExtractedAddressContractCall || isSelfESDTContract(receiver, sender, data)\n  );\n}\n\nexport function isSelfESDTContract(\n  receiver: string,\n  sender?: string,\n  data?: string\n) {\n  const parts = data?.split('@');\n  if (parts == null) {\n    return false;\n  }\n  const [type, ...restParts] = parts;\n  const isSelfTransaction =\n    sender != null && receiver != null && receiver === sender;\n  const isCorrectESDTType = ESDTTransferTypes.includes(type);\n  const areDataPartsValid = restParts.every(\n    (part) => isHexValidCharacters(part) && isHexValidLength(part)\n  );\n  return isSelfTransaction && isCorrectESDTType && areDataPartsValid;\n}\n\nconst isHexValidCharacters = (str: string) => {\n  return str.toLowerCase().match(/[0-9a-f]/g);\n};\nconst isHexValidLength = (str: string) => {\n  return str.length % 2 === 0;\n};\n\nexport function getAddressFromDataField({\n  receiver,\n  data,\n}: {\n  receiver: string;\n  data: string;\n}) {\n  try {\n    if (!data) {\n      return receiver;\n    }\n    const parsedData = isStringBase64(data)\n      ? TransactionPayload.fromEncoded(data).toString()\n      : data;\n\n    const addressIndex = getAddressIndex(parsedData);\n\n    const parts = parsedData.split('@');\n    return addressIndex > -1 ? parts[addressIndex] : receiver;\n  } catch (err) {\n    console.log(err);\n    return;\n  }\n}\n\nfunction getAddressIndex(data: string) {\n  if (data.includes(TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)) {\n    return 1;\n  }\n  if (data.includes(TypesOfSmartContractCallsEnum.ESDTNFTTransfer)) {\n    return 4;\n  }\n  return -1;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { parseAmount } from '../../helpers';\n\n@Pipe({\n  name: 'parseAmount',\n})\nexport class ParseAmountPipe implements PipeTransform {\n  transform(value: string, decimals?: number): string {\n    return parseAmount(value, decimals);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IPlainTransactionObject } from '@multiversx/sdk-core/out';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { TransactionsOptions } from '../../services/transactions/transactions.service';\nimport { TxStatusEnum } from '../../types';\n\nimport {\n  AddTransactionsBatch,\n  CancelPendingSignature,\n  ChangeTxStatus,\n  MoveToSignedTransactions,\n  RemoveTransaction,\n  ResetTransactions,\n  SetTransactionHashes,\n} from './transactions.actions';\n\nexport interface SingleTransactionModel {\n  id: number;\n  transactions: IPlainTransactionObject[];\n  transactionsHashes?: string[];\n  status: TxStatusEnum;\n  options: TransactionsOptions;\n}\n\nexport interface TransactionsStateModel {\n  transactions: SingleTransactionModel[];\n}\nexport const TransactionsInitialState = {\n  transactions: [],\n};\n\n@State<TransactionsStateModel>({\n  name: 'transactions',\n  defaults: TransactionsInitialState,\n})\n@Injectable()\nexport class TransactionsState {\n  constructor() {}\n\n  @Action(AddTransactionsBatch)\n  async addTransactionBatch(\n    { setState, getState }: StateContext<TransactionsStateModel>,\n    { payload }: AddTransactionsBatch\n  ) {\n    const transactions = getState().transactions;\n    transactions.push(payload);\n    setState({ transactions });\n  }\n\n  @Action(MoveToSignedTransactions)\n  async moveToSigned(\n    { setState, getState }: StateContext<TransactionsStateModel>,\n    { payload }: MoveToSignedTransactions\n  ) {\n    const transactions = getState().transactions;\n    transactions.map((tx) => {\n      if (tx.id === payload.id) {\n        tx.status = TxStatusEnum.SIGNED;\n        tx.transactions = payload.signedTransactions;\n      }\n    });\n    setState({ transactions });\n  }\n\n  @Action(ResetTransactions)\n  async resetTransactions({ setState }: StateContext<TransactionsStateModel>) {\n    setState(TransactionsInitialState);\n  }\n\n  @Action(ChangeTxStatus)\n  async moveToFailed(\n    { setState, getState }: StateContext<TransactionsStateModel>,\n    { payload }: ChangeTxStatus\n  ) {\n    const transactions = getState().transactions;\n    transactions.map((tx) => {\n      if (tx.id === payload.id) {\n        tx.status = payload.newStatus as TxStatusEnum;\n      }\n    });\n    setState({ transactions });\n  }\n\n  @Action(RemoveTransaction)\n  async removeTransaction(\n    { setState, getState }: StateContext<TransactionsStateModel>,\n    { payload }: RemoveTransaction\n  ) {\n    let transactions = getState().transactions;\n    transactions = transactions.filter((tx) => {\n      return tx.id !== payload.id;\n    });\n    setState({ transactions });\n  }\n\n  @Action(SetTransactionHashes)\n  async setTxHashes(\n    { setState, getState }: StateContext<TransactionsStateModel>,\n    { payload }: SetTransactionHashes\n  ) {\n    const transactions = getState().transactions;\n    transactions.map((tx) => {\n      if (tx.id === payload.id) {\n        tx.transactionsHashes = payload.hashes;\n      }\n    });\n    setState({ transactions });\n  }\n\n  @Action(CancelPendingSignature)\n  async cancelPendingSignature({\n    setState,\n    getState,\n  }: StateContext<TransactionsStateModel>) {\n    const transactions = getState().transactions;\n    transactions.map((tx) => {\n      if (tx.status === TxStatusEnum.PENDING_SIGNATURE) {\n        tx.status = TxStatusEnum.CANCELLED;\n      }\n    });\n    setState({ transactions });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'trimStr',\n})\nexport class TrimStrPipe implements PipeTransform {\n  transform(value: string, ...args: unknown[]): unknown {\n    return value.slice(0, 6) + '...' + value.slice(-6);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeAgo',\n})\nexport class TimeAgoPipe implements PipeTransform {\n  transform(value: number, ...args: unknown[]): unknown {\n    if (value) {\n      const seconds = Math.floor(\n        (+new Date() - +new Date(value * 1000)) / 1000\n      );\n      if (seconds < 29)\n        // less than 30 seconds ago will show as 'Just now'\n        return 'Just now';\n      const intervals: { [key: string]: number } = {\n        year: 31536000,\n        month: 2592000,\n        week: 604800,\n        day: 86400,\n        hour: 3600,\n        minute: 60,\n        second: 1,\n      };\n      let counter;\n      for (const i in intervals) {\n        counter = Math.floor(seconds / intervals[i]);\n        if (counter > 0)\n          if (counter === 1) {\n            return counter + ' ' + i + ' ago'; // singular (1 day ago)\n          } else {\n            return counter + ' ' + i + 's ago'; // plural (2 days ago)\n          }\n      }\n    }\n    return value;\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { lastValueFrom } from 'rxjs';\nimport { DappConfig, DAPP_CONFIG } from '../../config';\nimport { AccountApiService } from '../../ngxs/account/account-api.service';\nimport { FormatAmountPipe } from '../formatAmount/format-amount.pipe';\n\n@Pipe({\n  name: 'addressToFormattedBalance',\n})\nexport class AddressToFormattedBalancePipe implements PipeTransform {\n  constructor(\n    @Inject(DAPP_CONFIG) public config: DappConfig,\n    private http: HttpClient,\n    private accountApi: AccountApiService,\n    private formatPipe: FormatAmountPipe\n  ) {}\n\n  async transform(value: string, ...args: unknown[]): Promise<string> {\n    const account = await lastValueFrom(this.accountApi.getAccount(value));\n\n    return this.formatPipe.transform(account.balance, {\n      digits: 2,\n      addCommas: true,\n    }) as string;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxsActionsExecutingModule } from '@ngxs-labs/actions-executing';\nimport {\n  NgxsStoragePluginModule,\n  StorageEngine,\n  STORAGE_ENGINE,\n} from '@ngxs/storage-plugin';\nimport { NgxsModule } from '@ngxs/store';\nimport { AccountState } from './ngxs/account/account.slice';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormatAmountPipe } from './pipes/formatAmount/format-amount.pipe';\nimport { CommonModule } from '@angular/common';\nimport { ParseAmountPipe } from './pipes/parseAmount/parse-amount.pipe';\nimport { TransactionsState } from './ngxs/account/transactions.slice';\nimport { TrimStrPipe } from './pipes/trimStr/trim-str.pipe';\nimport { TimeAgoPipe } from './pipes/timeAgo/time-ago.pipe';\nimport { AddressToFormattedBalancePipe } from './pipes/addressToFormattedBalance/address-to-formatted-balance.pipe';\n\nexport class MyStorageEngine implements StorageEngine {\n  static STORAGE_PREFIX = 'ngx-sdk-dapp_';\n  get length(): number {\n    return Object.keys(localStorage).filter((x) =>\n      x.startsWith(MyStorageEngine.STORAGE_PREFIX)\n    ).length;\n  }\n\n  getItem(key: string): any {\n    return localStorage.getItem(MyStorageEngine.STORAGE_PREFIX + key);\n  }\n\n  setItem(key: string, val: any): void {\n    localStorage.setItem(MyStorageEngine.STORAGE_PREFIX + key, val);\n  }\n\n  removeItem(key: string): void {\n    localStorage.removeItem(MyStorageEngine.STORAGE_PREFIX + key);\n  }\n\n  clear(): void {\n    Object.keys(localStorage)\n      .filter((x) => x.startsWith(MyStorageEngine.STORAGE_PREFIX))\n      .forEach((x) => localStorage.removeItem(x));\n  }\n}\n\n@NgModule({\n  declarations: [\n    FormatAmountPipe,\n    ParseAmountPipe,\n    TrimStrPipe,\n    TimeAgoPipe,\n    AddressToFormattedBalancePipe,\n  ],\n  imports: [\n    NgxsModule.forRoot([AccountState, TransactionsState]),\n    NgxsStoragePluginModule.forRoot(),\n    NgxsActionsExecutingModule.forRoot(),\n    HttpClientModule,\n    CommonModule,\n  ],\n  providers: [\n    {\n      provide: STORAGE_ENGINE,\n      useClass: MyStorageEngine,\n    },\n  ],\n  exports: [\n    FormatAmountPipe,\n    ParseAmountPipe,\n    TrimStrPipe,\n    TimeAgoPipe,\n    AddressToFormattedBalancePipe,\n  ],\n})\nexport class NgxSdkDappModule {}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DappConfig, DAPP_CONFIG } from '../../../config';\nimport { AccountService } from '../../account/account.service';\nimport { AuthenticationService } from '../../authentication/authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NativeAuthTokenInterceptorService implements HttpInterceptor {\n  constructor(\n    private accountService: AccountService,\n    private authenticationService: AuthenticationService,\n    @Inject(DAPP_CONFIG) private config: DappConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // add auth header with jwt if account is logged in and request is to the api url\n    const account = this.accountService.account;\n    const isLoggedIn = this.authenticationService.isAuthenticated();\n    const isApiUrl = Object.values(this.config.nativeAuthAPIs).some(\n      (apiURL) => {\n        return request.url.startsWith(apiURL);\n      }\n    );\n    if (isLoggedIn && isApiUrl) {\n      request = request.clone({\n        setHeaders: { Authorization: `Bearer ${account.accessToken}` },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { GenericProvider, ProvidersType } from '../genericProvider';\nimport { Router } from '@angular/router';\nimport { IPlainTransactionObject, Transaction } from '@multiversx/sdk-core/out';\nimport { ExtensionProvider } from '@multiversx/sdk-extension-provider/out';\nimport { NativeAuthClient } from '@multiversx/sdk-native-auth-client';\nimport { Store } from '@ngxs/store';\nimport { LoginAccount } from '../../../ngxs/account/account.actions';\nimport { AccountStateModel } from '../../../ngxs/account/account.slice';\nimport { AccountService } from '../../account/account.service';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { DappConfig, DAPP_CONFIG } from '../../../config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExtensionProviderService extends GenericProvider {\n  private localStore: Store;\n  private localAccount: AccountService;\n  constructor(\n    store: Store,\n    accountService: AccountService,\n    authenticationService: AuthenticationService,\n    @Inject(DAPP_CONFIG) override config: DappConfig,\n    private router: Router\n  ) {\n    super(store, accountService, authenticationService, config);\n    this.localStore = store;\n    this.localAccount = accountService;\n  }\n\n  override async connect(navAfterConnectRoute: string): Promise<{\n    client: NativeAuthClient;\n    init: string;\n  }> {\n    const { client, init } = await super.connect(navAfterConnectRoute);\n\n    const extensionInstance = ExtensionProvider.getInstance();\n\n    const extensionInitialized = await extensionInstance.init();\n    if (!extensionInitialized) {\n      throw new Error('Extension could not be initialized');\n    }\n\n    await extensionInstance.login({ token: init });\n    const { signature, address } = extensionInstance.account;\n    if (signature) {\n      const accessToken = client.getToken(address, init, signature);\n      this.localStore.dispatch(\n        new LoginAccount({\n          address,\n          accessToken,\n          currentProvider: ProvidersType.Extension,\n        })\n      );\n    }\n    if (navAfterConnectRoute) this.router.navigate([navAfterConnectRoute]);\n\n    return { client, init };\n  }\n\n  override async logout(): Promise<boolean> {\n    const extensionInstance = ExtensionProvider.getInstance();\n    await extensionInstance.logout();\n    this.router.navigate(['/']);\n    return super.logout();\n  }\n\n  override reInitialize(account: AccountStateModel): void {\n    if (\n      this.localAccount &&\n      this.localAccount.account.currentProvider !== ProvidersType.Extension\n    )\n      return;\n    ExtensionProvider.getInstance().init();\n    ExtensionProvider.getInstance().setAddress(account.address);\n  }\n\n  override async sendTransactions(\n    transactions: IPlainTransactionObject[],\n    txId: number\n  ): Promise<void> {\n    const txArray = transactions.map((tx) => {\n      const tx1 = Transaction.fromPlainObject(tx);\n      return tx1;\n    });\n    try {\n      const result = await ExtensionProvider.getInstance().signTransactions(\n        txArray\n      );\n      this.addSignedTransactionsToState(\n        result.map((tx) => tx.toPlainObject()),\n        txId\n      );\n    } catch (error) {\n      this.addToCancelledTransaction(txId);\n    }\n  }\n\n  override cancelAction(): void {\n    ExtensionProvider.getInstance().cancelAction();\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { IPlainTransactionObject, Transaction } from '@multiversx/sdk-core/out';\nimport { NativeAuthClient } from '@multiversx/sdk-native-auth-client';\nimport { WalletProvider } from '@multiversx/sdk-web-wallet-provider/out';\nimport { Store } from '@ngxs/store';\nimport { DappConfig, DAPP_CONFIG } from '../../../config';\nimport { LoginAccount } from '../../../ngxs/account/account.actions';\nimport { CancelPendingSignature } from '../../../ngxs/account/transactions.actions';\nimport { AccountService } from '../../account/account.service';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { GenericProvider, ProvidersType } from '../genericProvider';\n\nexport const DAPP_INIT_ROUTE = '/dapp/init';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebWalletProviderService extends GenericProvider {\n  private localStore: Store;\n  private localAccount: AccountService;\n  private walletProvider: WalletProvider | undefined;\n\n  constructor(\n    store: Store,\n    accountService: AccountService,\n    authenticationService: AuthenticationService,\n    private router: Router,\n    private route: ActivatedRoute,\n    @Inject(DAPP_CONFIG) override config: DappConfig\n  ) {\n    super(store, accountService, authenticationService, config);\n    this.localStore = store;\n    this.localAccount = accountService;\n\n    this.route.queryParams.subscribe((params) => {\n      if (\n        params['walletProviderStatus'] === 'transactionsSigned' &&\n        params['signSession']\n      ) {\n        this.transactionsSuccessCallback(parseInt(params['signSession']));\n      }\n      if (params['signSession'] && params['status'] === 'failed') {\n        this.transactionsFailedCallback(parseInt(params['signSession']));\n      }\n      if (params['signSession'] && params['status'] === 'cancelled') {\n        this.transactionsCancelledCallback(parseInt(params['signSession']));\n      }\n      if (params['address'] && params['signature'])\n        this.connectCallback(params['address'], params['signature']);\n    });\n  }\n\n  private transactionsFailedCallback(signSession: number) {\n    const url = new URL(window.location.href);\n    this.router.navigate([url.pathname]);\n    this.addFailedTransactionsToState(signSession);\n  }\n\n  private transactionsCancelledCallback(signSession: number) {\n    const url = new URL(window.location.href);\n    this.router.navigate([url.pathname]);\n    this.addToCancelledTransaction(signSession);\n  }\n\n  private transactionsSuccessCallback(signSession: number) {\n    const transactions = this.walletProvider?.getTransactionsFromWalletUrl();\n    if (!transactions) return;\n\n    transactions.map((tx) => {\n      if (tx.data) {\n        tx.data = Buffer.from(tx.data ?? '', 'utf8').toString('base64');\n      }\n    });\n\n    const url = new URL(window.location.href);\n    this.router.navigate([url.pathname]);\n    this.addSignedTransactionsToState(transactions, signSession);\n  }\n  private async connectCallback(address: string, signature: string) {\n    const accessToken = new NativeAuthClient().getToken(\n      address,\n      localStorage.getItem('initToken')!,\n      signature\n    );\n\n    localStorage.removeItem('initToken');\n\n    this.localStore.dispatch(\n      new LoginAccount({\n        address,\n        accessToken,\n        currentProvider: ProvidersType.WebWallet,\n      })\n    );\n\n    this.walletProvider = new WalletProvider(\n      `https://wallet.multiversx.com${DAPP_INIT_ROUTE}`\n    );\n\n    const navAfterConnectRoute = localStorage.getItem('navAfterConnectRoute');\n    if (navAfterConnectRoute)\n      await this.router.navigate([navAfterConnectRoute]);\n\n    window.location.reload();\n  }\n\n  override async connect(navAfterConnectRoute: string): Promise<{\n    client: NativeAuthClient;\n    init: string;\n  }> {\n    const { client, init } = await super.connect(navAfterConnectRoute);\n    localStorage.setItem('initToken', init);\n    localStorage.setItem('navAfterConnectRoute', navAfterConnectRoute || '');\n\n    this.walletProvider = new WalletProvider(\n      `${this.config.walletURL}${DAPP_INIT_ROUTE}`\n    );\n    this.walletProvider.login({\n      callbackUrl: window.location.href,\n      token: init,\n    });\n\n    return { client, init };\n  }\n\n  override async logout(): Promise<boolean> {\n    if (!this.walletProvider)\n      throw new Error('Provider was not reinitialized!');\n    super.logout();\n    this.walletProvider.logout({ callbackUrl: window.location.href });\n    return true;\n  }\n\n  override reInitialize(): void {\n    if (\n      this.localAccount &&\n      this.localAccount.account.currentProvider !== ProvidersType.WebWallet\n    )\n      return;\n\n    this.walletProvider = new WalletProvider(\n      `${this.config.walletURL}${DAPP_INIT_ROUTE}`\n    );\n  }\n\n  override cancelAction(): void {\n    if (!this.walletProvider) {\n      return;\n    }\n\n    this.localStore.dispatch(new CancelPendingSignature());\n  }\n\n  override async sendTransactions(\n    transactions: IPlainTransactionObject[],\n    txId: number\n  ): Promise<void> {\n    const txArray = transactions.map((tx) => {\n      const tx1 = Transaction.fromPlainObject(tx);\n      return tx1;\n    });\n\n    console.log('hererererererere');\n\n    try {\n      const url = new URL(window.location.href);\n      url.searchParams.append('signSession', txId.toString());\n\n      this.walletProvider?.signTransactions(txArray, {\n        callbackUrl: encodeURIComponent(url.href),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { DappConfig, DAPP_CONFIG } from '../../../config';\nimport { AccountService } from '../../account/account.service';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { GenericProvider, ProvidersType } from '../genericProvider';\nimport { WalletConnectV2Provider } from '@multiversx/sdk-wallet-connect-provider';\nimport { NativeAuthClient } from '@multiversx/sdk-native-auth-client';\nimport type {\n  SessionEventTypes,\n  SessionTypes,\n} from '@multiversx/sdk-wallet-connect-provider/out/walletConnectV2Provider';\nimport { Observable } from 'rxjs';\nimport { LoginAccount } from '../../../ngxs/account/account.actions';\nimport { IPlainTransactionObject, Transaction } from '@multiversx/sdk-core/out';\nimport {\n  ERD_CANCEL_ACTION,\n  MULTIVERSX_CANCEL_ACTION,\n} from '../../../constants';\nimport { CancelPendingSignature } from '../../../ngxs/account/transactions.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class XPortalProviderService extends GenericProvider {\n  private walletConnect: WalletConnectV2Provider | undefined;\n  private userResponseObservable: Observable<string> | undefined;\n  private navAfterConnectRoute: string | undefined;\n  private initToken: string | undefined;\n  private localStore: Store;\n  private localAccountService: AccountService;\n  constructor(\n    store: Store,\n    accountService: AccountService,\n    authenticationService: AuthenticationService,\n    @Inject(DAPP_CONFIG) override config: DappConfig,\n    private router: Router\n  ) {\n    super(store, accountService, authenticationService, config);\n    this.localStore = store;\n    this.localAccountService = accountService;\n  }\n\n  override async connect(navAfterConnectRoute: string): Promise<{\n    client: NativeAuthClient;\n    init: string;\n    qrCodeStr: string;\n    approval: any;\n    token: string;\n  }> {\n    const { client, init } = await super.connect(navAfterConnectRoute);\n    this.initToken = init;\n    this.navAfterConnectRoute = navAfterConnectRoute;\n\n    this.walletConnect = new WalletConnectV2Provider(\n      {\n        onClientLogin: this.onClientLogin,\n        onClientLogout: this.onClientLogout,\n        onClientEvent: this.onClientEvent,\n      },\n      this.config.chainID,\n      this.config.walletConnectV2RelayAddresses[0],\n      this.config.walletConnectV2ProjectId\n    );\n\n    try {\n      await this.walletConnect.init();\n      const { uri, approval } = await this.walletConnect.connect({\n        methods: [MULTIVERSX_CANCEL_ACTION, ERD_CANCEL_ACTION],\n      });\n      if (!uri) {\n        throw new Error('WalletConnect could not be initialized');\n      }\n      let walletConectUriWithToken = uri;\n      walletConectUriWithToken = `${walletConectUriWithToken}&token=${init}`;\n\n      this.awaitUserConnectionResponse({\n        approval,\n        token: init,\n      });\n\n      return {\n        client,\n        init,\n        qrCodeStr: walletConectUriWithToken,\n        approval,\n        token: init,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async awaitUserConnectionResponse({\n    approval,\n    token,\n  }: {\n    approval: any;\n    token: string;\n  }) {\n    try {\n      await this.walletConnect?.login({ approval, token });\n      this.userResponseObservable = new Observable((subscriber) => {\n        subscriber.complete();\n      });\n    } catch (error) {\n      this.userResponseObservable = new Observable((subscriber) => {\n        subscriber.next('rejected');\n        subscriber.complete();\n        this.walletConnect?.logout();\n      });\n    }\n\n    return this.userResponseObservable;\n  }\n\n  private onClientLogin = () => {\n    if (!this.initToken) {\n      throw new Error('No init token found');\n    }\n\n    this.walletConnect?.getSignature().then((signature) => {\n      this.walletConnect?.getAddress().then((address) => {\n        const accessToken = new NativeAuthClient().getToken(\n          address,\n          this.initToken!,\n          signature\n        );\n        this.localStore.dispatch(\n          new LoginAccount({\n            address,\n            accessToken,\n            currentProvider: ProvidersType.XPortal,\n          })\n        );\n        if (this.navAfterConnectRoute)\n          this.router.navigate([this.navAfterConnectRoute]);\n      });\n    });\n  };\n\n  private onClientLogout = () => {\n    this.logout();\n  };\n\n  private onClientEvent = (event: SessionEventTypes['event']) => {};\n\n  override async logout(): Promise<boolean> {\n    if (!this.walletConnect) return super.logout();\n\n    const connected = await this.walletConnect.isConnected();\n    if (connected) this.walletConnect.logout();\n\n    this.router.navigate(['/']);\n    return super.logout();\n  }\n\n  override async sendTransactions(\n    transactions: IPlainTransactionObject[],\n    txId: number\n  ): Promise<void> {\n    const txArray = transactions.map((tx) => {\n      const tx1 = Transaction.fromPlainObject(tx);\n      return tx1;\n    });\n    try {\n      const result = await this.walletConnect?.signTransactions(txArray);\n\n      if (!result) return this.addToCancelledTransaction(txId);\n\n      this.addSignedTransactionsToState(\n        result.map((tx) => tx.toPlainObject()),\n        txId\n      );\n    } catch (error) {\n      this.addToCancelledTransaction(txId);\n    }\n  }\n\n  override async reInitialize(): Promise<string> {\n    if (\n      this.localAccountService &&\n      this.localAccountService.account.currentProvider !== ProvidersType.XPortal\n    )\n      return '';\n\n    try {\n      this.walletConnect = new WalletConnectV2Provider(\n        {\n          onClientLogin: () => {\n            this.onClientLogin();\n          },\n          onClientLogout: () => {\n            this.onClientLogout();\n          },\n          onClientEvent: (e) => {\n            this.onClientEvent(e);\n          },\n        },\n        this.config.chainID,\n        this.config.walletConnectV2RelayAddresses[0],\n        this.config.walletConnectV2ProjectId\n      );\n\n      await this.walletConnect.init();\n      const connected = await this.walletConnect.isConnected();\n\n      if (\n        !connected &&\n        this.localAccountService.account.currentProvider ===\n          ProvidersType.XPortal\n      )\n        this.logout();\n      else\n        this.walletConnect.methods = [\n          MULTIVERSX_CANCEL_ACTION,\n          ERD_CANCEL_ACTION,\n        ];\n    } catch (error) {\n      this.logout();\n    }\n\n    return '';\n  }\n\n  override async cancelAction(): Promise<any> {\n    try {\n      if (!this.walletConnect) {\n        return;\n      }\n\n      this.localStore.dispatch(new CancelPendingSignature());\n\n      await this.walletConnect?.sendCustomRequest?.({\n        request: {\n          method: MULTIVERSX_CANCEL_ACTION,\n          params: { action: 'cancelSignTx' },\n        },\n      });\n    } catch (error) {\n      console.warn('WalletConnectV2: Unable to send cancelAction event', error);\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IPlainTransactionObject, Transaction } from '@multiversx/sdk-core/out';\nimport { HWProvider } from '@multiversx/sdk-hw-provider/out';\nimport { NativeAuthClient } from '@multiversx/sdk-native-auth-client';\nimport { Store } from '@ngxs/store';\nimport { lastValueFrom, throwError } from 'rxjs';\nimport { DappConfig, DAPP_CONFIG } from '../../../config';\nimport { LoginAccount } from '../../../ngxs/account/account.actions';\nimport { AccountStateModel } from '../../../ngxs/account/account.slice';\nimport { AccountService } from '../../account/account.service';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { GenericProvider, ProvidersType } from '../genericProvider';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LedgerProviderService extends GenericProvider {\n  private localStore: Store;\n  private localAccount: AccountService;\n  private ledgerProvider: HWProvider | undefined;\n  private navAfterConnectRoute: string | undefined;\n\n  constructor(\n    store: Store,\n    accountService: AccountService,\n    authenticationService: AuthenticationService,\n    @Inject(DAPP_CONFIG) override config: DappConfig,\n    private router: Router\n  ) {\n    super(store, accountService, authenticationService, config);\n    this.localStore = store;\n    this.localAccount = accountService;\n  }\n\n  override async connect(navAfterConnectRoute: string): Promise<{\n    client: NativeAuthClient;\n    init: string;\n    accounts?: string[];\n    error?: string;\n  }> {\n    const { client, init } = await super.connect(navAfterConnectRoute);\n    this.navAfterConnectRoute = navAfterConnectRoute;\n\n    this.ledgerProvider = new HWProvider();\n\n    try {\n      await this.ledgerProvider.init();\n\n      if (await this.ledgerProvider.isInitialized()) {\n        try {\n          const accounts = await this.ledgerProvider.getAccounts(0, 10);\n          return { client, init, accounts };\n        } catch (error) {\n          return {\n            client,\n            init,\n            error: 'Could not get accounts, open multiversx app on ledger',\n          };\n        }\n      } else {\n        return {\n          client,\n          init,\n          error: 'Could not initialize ledger provider',\n        };\n      }\n    } catch (error) {\n      return {\n        client,\n        init,\n        error: 'Could not initialize ledger provider',\n      };\n    }\n  }\n\n  public async authenticateAccount(index: number) {\n    const { client, init } = await super.connect(\n      this.navAfterConnectRoute || '/'\n    );\n\n    try {\n      const loginResult = await this.ledgerProvider?.tokenLogin({\n        addressIndex: index,\n        token: Buffer.from(init),\n      });\n      if (!loginResult?.signature || !loginResult?.address) {\n        throw new Error('Could not login with ledger');\n      }\n      const { signature, address } = loginResult;\n\n      const accessToken = client.getToken(address, init, signature.hex());\n      this.localStore.dispatch(\n        new LoginAccount({\n          address,\n          accessToken,\n          currentProvider: ProvidersType.Ledger,\n          ledgerIndex: index,\n        })\n      );\n\n      if (this.navAfterConnectRoute)\n        this.router.navigate([this.navAfterConnectRoute]);\n    } catch (error) {}\n  }\n\n  override async logout(): Promise<boolean> {\n    await this.ledgerProvider?.logout();\n    this.router.navigate(['/']);\n    return super.logout();\n  }\n\n  override async sendTransactions(\n    transactions: IPlainTransactionObject[],\n    txId: number\n  ): Promise<any> {\n    const txArray = transactions.map((tx) => {\n      const tx1 = Transaction.fromPlainObject(tx);\n      return tx1;\n    });\n    try {\n      const result = await this.ledgerProvider?.signTransactions(txArray);\n\n      this.addSignedTransactionsToState(\n        result!.map((tx) => tx.toPlainObject()),\n        txId\n      );\n    } catch (error) {\n      this.addToCancelledTransaction(txId);\n    }\n  }\n\n  public async loadAccounts(\n    page: number,\n    numAddresses: number\n  ): Promise<string[]> {\n    if (this.ledgerProvider) {\n      return this.ledgerProvider.getAccounts(page, numAddresses);\n    }\n    throw new Error('Ledger provider not initialized');\n  }\n\n  override async reInitialize(account: AccountStateModel): Promise<void> {\n    if (account.currentProvider !== ProvidersType.Ledger) return;\n\n    try {\n      this.ledgerProvider = new HWProvider();\n      await this.ledgerProvider.init();\n\n      await this.ledgerProvider.isInitialized();\n\n      this.ledgerProvider.setAddressIndex(account.ledgerIndex!);\n    } catch (error) {}\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IPlainTransactionObject } from '@multiversx/sdk-core/out';\nimport { Subscription, takeWhile } from 'rxjs';\nimport { AccountService } from '../account/account.service';\nimport { AuthenticationService } from '../authentication/authentication.service';\nimport { ExtensionProviderService } from './extension/extensionProvider.service';\nimport { ProvidersType } from './genericProvider';\nimport { LedgerProviderService } from './ledger/ledger-provider.service';\nimport { WebWalletProviderService } from './webWallet/web-walletProvider.service';\nimport { XPortalProviderService } from './xPortal/x-portal.service';\n\ntype AllProvidersType =\n  | ExtensionProviderService\n  | XPortalProviderService\n  | WebWalletProviderService\n  | LedgerProviderService\n  | null;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PermissionsProviderService {\n  private _provider: AllProvidersType;\n  private localAccountService: AccountService;\n  private accountSubscription: Subscription | null = null;\n  constructor(\n    private extensionProvider: ExtensionProviderService,\n    private webWalletProvider: WebWalletProviderService,\n    private xportalProvider: XPortalProviderService,\n    private ledgerProvider: LedgerProviderService,\n    accountService: AccountService,\n    authService: AuthenticationService\n  ) {\n    this._provider = null;\n    this.localAccountService = accountService;\n    let providerSet = false;\n    if (accountService.account$) {\n      this.accountSubscription = accountService.account$\n        .pipe(takeWhile((account) => !providerSet))\n        .subscribe((account) => {\n          if (\n            account.currentProvider !== ProvidersType.EMPTY &&\n            authService.isAuthenticated()\n          ) {\n            providerSet = true;\n            this.setProvider(account.currentProvider as ProvidersType);\n            this.refreshRemoteData();\n          }\n        });\n    }\n  }\n\n  private refreshRemoteData() {\n    this.localAccountService.refetchAccountData();\n  }\n\n  setProvider(providerType: ProvidersType) {\n    switch (providerType) {\n      case ProvidersType.Extension:\n        this.provider = this.extensionProvider;\n        break;\n\n      case ProvidersType.WebWallet:\n        this.provider = this.webWalletProvider;\n        break;\n\n      case ProvidersType.XPortal:\n        this.provider = this.xportalProvider;\n        break;\n\n      case ProvidersType.Ledger:\n        this.provider = this.ledgerProvider;\n        break;\n      default:\n        this.provider = null;\n        break;\n    }\n  }\n\n  public get provider(): AllProvidersType {\n    return this._provider;\n  }\n\n  private set provider(provider: AllProvidersType) {\n    this._provider = provider;\n  }\n\n  public connect(navAfterConnectRoute: string): Promise<any> {\n    if (this._provider) {\n      return this._provider.connect(navAfterConnectRoute);\n    }\n    throw new Error('Provider is not set');\n  }\n\n  public logout(navAfterConnectRoute?: string): Promise<boolean> {\n    if (this._provider) {\n      return this._provider.logout();\n    }\n    throw new Error('Provider is not set');\n  }\n\n  public async cancelAction(): Promise<void> {\n    if (this._provider && this._provider.cancelAction) {\n      this._provider.cancelAction();\n      return;\n    }\n    throw new Error('Provider is not set123');\n  }\n\n  public sendTransactions(\n    transactions: IPlainTransactionObject[],\n    txId: number\n  ) {\n    if (this._provider) {\n      return this._provider.sendTransactions(transactions, txId);\n    }\n    throw new Error('Provider is not set');\n  }\n}\n","import { Inject, Injectable, TemplateRef } from '@angular/core';\nimport { IPlainTransactionObject, Transaction } from '@multiversx/sdk-core/out';\nimport { Select, Store } from '@ngxs/store';\nimport { lastValueFrom, map, Observable, skipWhile, take } from 'rxjs';\nimport { DappConfig, DAPP_CONFIG } from '../../config';\nimport { AccountApiService } from '../../ngxs/account/account-api.service';\nimport {\n  AddTransactionsBatch,\n  CancelPendingSignature,\n  ChangeTxStatus,\n  RemoveTransaction,\n  ResetTransactions,\n  SetTransactionHashes,\n} from '../../ngxs/account/transactions.actions';\nimport {\n  SingleTransactionModel,\n  TransactionsStateModel,\n} from '../../ngxs/account/transactions.slice';\nimport { ParseAmountPipe } from '../../pipes/parseAmount/parse-amount.pipe';\nimport { TxStatusEnum } from '../../types';\nimport { AccountService } from '../account/account.service';\nimport { PermissionsProviderService } from '../authProviders/PermissionsProvider';\n\nexport interface TransactionsOptions {\n  signOnly?: boolean;\n  transactionTitle: string;\n}\n\nexport interface TransactionsToSend {\n  id: number;\n  transactions: IPlainTransactionObject[];\n  txOptions: TransactionsOptions;\n}\n\ninterface TxInfoType {\n  txHash: string;\n  status: string;\n}\n\nexport interface ToastInfo {\n  id: number;\n  header: string;\n  transactionsInfo: TxInfoType[];\n  status: string;\n  templateRef: TemplateRef<any>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransactionsService {\n  public toasts: ToastInfo[] = [];\n  @Select() transactions$: Observable<TransactionsStateModel> | undefined;\n\n  toastTemplate: TemplateRef<any> | null = null;\n\n  private trackedTransactions: number[] = [];\n\n  constructor(\n    private permissionsProvider: PermissionsProviderService,\n    private store: Store,\n    private accountApi: AccountApiService,\n    private accountService: AccountService,\n    private parseAmount: ParseAmountPipe,\n    @Inject(DAPP_CONFIG) public config: DappConfig\n  ) {\n    setTimeout(() => {\n      this.transactions$?.subscribe((state: TransactionsStateModel) => {\n        for (const transaction of state.transactions) {\n          if (\n            transaction.status === TxStatusEnum.SIGNED &&\n            !transaction.options.signOnly\n          ) {\n            this.sendTxToAPI(transaction.transactions, transaction.id);\n          }\n\n          if (\n            transaction.status === TxStatusEnum.SIGNATURE_FAILED ||\n            transaction.status === TxStatusEnum.CANCELLED ||\n            transaction.status === TxStatusEnum.SEND_IN_PROGRESS ||\n            transaction.status === TxStatusEnum.SENT_SUCCESS ||\n            transaction.status === TxStatusEnum.SENT_ERROR\n          ) {\n            const transactionsInfo: TxInfoType[] | undefined =\n              transaction.transactionsHashes?.map(\n                (txHash): TxInfoType => ({\n                  txHash: txHash,\n                  status: TxStatusEnum.SEND_IN_PROGRESS,\n                })\n              );\n            this.show(\n              transaction.options.transactionTitle,\n              transactionsInfo || [],\n              transaction.id,\n              transaction.status\n            );\n\n            if (\n              transaction.transactionsHashes?.length &&\n              !this.trackedTransactions.includes(transaction.id)\n            ) {\n              this.trackedTransactions.push(transaction.id);\n              this.trackTransactionStatus(transaction);\n            }\n          }\n        }\n      });\n    }, 1000);\n\n    this.watchUnload();\n  }\n\n  private async watchUnload() {\n    window.onbeforeunload = (e) => {\n      if (this.permissionsProvider.provider?.cancelAction) {\n        this.permissionsProvider.provider.cancelAction();\n        this.store.dispatch(new CancelPendingSignature());\n      }\n    };\n  }\n\n  private async trackTransactionStatus(transaction: SingleTransactionModel) {\n    if (!transaction.transactionsHashes) return;\n    try {\n      const txStatuses = await lastValueFrom<any>(\n        this.accountApi.trackTransactions(transaction.transactionsHashes)\n      );\n      const shouldContinueTracking = this.updateToastStatus(\n        txStatuses,\n        transaction.id\n      );\n      if (shouldContinueTracking) {\n        setTimeout(() => {\n          this.trackTransactionStatus(transaction);\n        }, 6000);\n      }\n    } catch (error) {}\n  }\n\n  public watchTransactionByTitle(\n    txTitle: string,\n    watchForStatus: TxStatusEnum\n  ): Observable<SingleTransactionModel | undefined> {\n    if (this.transactions$ === undefined)\n      throw new Error('transactions$ is undefined');\n\n    return this.transactions$\n      .pipe(\n        map((state) => {\n          const tx = state.transactions.filter((tx) => {\n            return tx.options.transactionTitle === txTitle;\n          });\n          return tx[0];\n        })\n      )\n      .pipe(skipWhile((tx) => !tx || tx.status !== watchForStatus))\n      .pipe(take(1));\n  }\n\n  public hasTransactionsInStatus(status: TxStatusEnum): Observable<boolean> {\n    if (this.transactions$ === undefined)\n      throw new Error('transactions$ is undefined');\n\n    return this.transactions$.pipe(\n      map((transaction) =>\n        transaction.transactions.some((tx) => {\n          return tx.status === status;\n        })\n      )\n    );\n  }\n\n  private updateToastStatus(\n    txHashesStatus: Array<{ status: string }>,\n    transactionId: number\n  ): boolean {\n    let shouldContinueTracking = false;\n\n    this.toasts.map((toast) => {\n      if (toast.id === transactionId) {\n        for (let i in txHashesStatus) {\n          switch (txHashesStatus[i].status) {\n            case 'fail':\n              this.store.dispatch(\n                new ChangeTxStatus({\n                  id: transactionId,\n                  newStatus: TxStatusEnum.SENT_ERROR,\n                })\n              );\n              toast.transactionsInfo[i].status = TxStatusEnum.SENT_ERROR;\n              break;\n\n            case 'success':\n              this.store.dispatch(\n                new ChangeTxStatus({\n                  id: transactionId,\n                  newStatus: TxStatusEnum.SENT_SUCCESS,\n                })\n              );\n              toast.transactionsInfo[i].status = TxStatusEnum.SENT_SUCCESS;\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        const shouldContinue = toast.transactionsInfo.some(\n          (tx) => tx.status === TxStatusEnum.SEND_IN_PROGRESS\n        );\n\n        const shouldSetSuccess = toast.transactionsInfo.every(\n          (tx) => tx.status === TxStatusEnum.SENT_SUCCESS\n        );\n\n        const shouldSetError = toast.transactionsInfo.some(\n          (tx) => tx.status === TxStatusEnum.SENT_ERROR\n        );\n\n        if (shouldSetError) {\n          toast.status = TxStatusEnum.SENT_ERROR;\n        }\n\n        if (shouldSetSuccess) {\n          toast.status = TxStatusEnum.SENT_SUCCESS;\n        }\n        shouldContinueTracking = shouldContinue;\n      }\n\n      return false;\n    });\n\n    if (!shouldContinueTracking) {\n      this.accountService.refetchAccountData();\n    }\n\n    return shouldContinueTracking;\n  }\n\n  private async sendTxToAPI(\n    transactions: IPlainTransactionObject[],\n    transactionsId: number\n  ) {\n    this.store.dispatch(\n      new ChangeTxStatus({\n        newStatus: TxStatusEnum.READY_TO_SEND,\n        id: transactionsId,\n      })\n    );\n\n    try {\n      const {\n        data: { txsHashes, numOfSentTxs },\n        error,\n      } = await lastValueFrom<any>(\n        this.accountApi.sendTransactions(transactions)\n      );\n\n      const hashesArray: string[] = Object.values(txsHashes);\n      if (\n        error ||\n        !txsHashes ||\n        numOfSentTxs === 0 ||\n        hashesArray.length === 0\n      ) {\n        this.store.dispatch(\n          new ChangeTxStatus({\n            newStatus: TxStatusEnum.SENT_ERROR,\n            id: transactionsId,\n          })\n        );\n        return;\n      }\n\n      this.store.dispatch(\n        new SetTransactionHashes({\n          id: transactionsId,\n          hashes: hashesArray,\n        })\n      );\n\n      this.store.dispatch(\n        new ChangeTxStatus({\n          newStatus: TxStatusEnum.SEND_IN_PROGRESS,\n          id: transactionsId,\n        })\n      );\n    } catch (error) {\n      this.store.dispatch(\n        new ChangeTxStatus({\n          newStatus: TxStatusEnum.SENT_ERROR,\n          id: transactionsId,\n        })\n      );\n    }\n  }\n\n  public sendTransactions(\n    transactions: Omit<\n      IPlainTransactionObject,\n      'nonce' | 'sender' | 'chainID' | 'version'\n    >[],\n    txOptions: TransactionsOptions\n  ): number {\n    const txId = Date.now();\n\n    const transactionsToSend = transactions.map((tx, index) => ({\n      ...tx,\n      nonce: this.accountService.account.nonce + index,\n      sender: this.accountService.account.address,\n      data: Buffer.from(tx.data ?? '', 'utf8').toString('base64'),\n      value: this.parseAmount.transform(tx.value),\n      chainID: this.config.chainID,\n      //TODO: change version if needed (ledger, guardians, etc)\n      version: 1,\n    }));\n\n    this.store.dispatch(\n      new AddTransactionsBatch({\n        id: txId,\n        transactions: transactionsToSend,\n        status: TxStatusEnum.PENDING_SIGNATURE,\n        options: txOptions,\n      })\n    );\n\n    this.permissionsProvider.sendTransactions(transactionsToSend, txId);\n\n    return txId;\n  }\n\n  show(\n    header: string,\n    transactionsInfo: TxInfoType[],\n    txId: number,\n    status: TxStatusEnum\n  ) {\n    if (!this.toastTemplate)\n      throw new Error('TransactionsService: toastTemplate is not set');\n\n    if (this.toasts.find((t) => t.id === txId)) return;\n\n    this.toasts.push({\n      id: txId,\n      header,\n      status,\n      transactionsInfo,\n      templateRef: this.toastTemplate,\n    });\n  }\n\n  remove(toastId: number) {\n    this.store.dispatch(new RemoveTransaction({ id: toastId }));\n    this.toasts = this.toasts.filter((t) => t.id != toastId);\n  }\n\n  setTxTemplate(template: any) {\n    this.toastTemplate = template;\n  }\n\n  resetToInitialState() {\n    this.store.dispatch(new ResetTransactions());\n  }\n}\n","/*\n * Public API Surface of ngx-sdk-dapp\n */\nexport * from './lib/ngx-sdk-dapp.module';\n\nexport * from './lib/services/account/account.service';\nexport * from './lib/services/authentication/authentication.service';\nexport * from './lib/ngxs/account/account-api.service';\nexport * from './lib/services/interceptors/nativeAuthTokenInterceptor/native-auth-token-interceptor.service';\nexport * from './lib/services/transactions/transactions.service';\nexport * from './lib/services/authProviders/PermissionsProvider';\nexport * from './lib/services/authProviders/xPortal/x-portal.service';\n\nexport * from './lib/services/authProviders/ledger/ledger-provider.service';\nexport { ProvidersType } from './lib/services/authProviders/genericProvider';\nexport { TxStatusEnum } from './lib/types';\n\nexport * from './lib/helpers';\n\nexport { FormatAmountPipe } from './lib/pipes/formatAmount/format-amount.pipe';\nexport { ParseAmountPipe } from './lib/pipes/parseAmount/parse-amount.pipe';\nexport { TrimStrPipe } from './lib/pipes/trimStr/trim-str.pipe';\nexport { TimeAgoPipe } from './lib/pipes/timeAgo/time-ago.pipe';\nexport { AddressToFormattedBalancePipe } from './lib/pipes/addressToFormattedBalance/address-to-formatted-balance.pipe';\n\nexport * from './lib/constants';\nexport * from './lib/config';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.AccountApiService","i1.AccountService","isString","Address","i1","i2.AccountApiService","i3.FormatAmountPipe","i1.ExtensionProviderService","i2.WebWalletProviderService","i3.XPortalProviderService","i4.LedgerProviderService","i5.AccountService","i6.AuthenticationService"],"mappings":"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"}